
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001506  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00001506  0000159a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  0000159a  2**0
                  ALLOC
  3 .stab         000026c4  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000123a  00000000  00000000  00003c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004e9a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004eac  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  00005416  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000058fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00005917  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_10>
      2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 36       	cpi	r26, 0x69	; 105
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 17 09 	call	0x122e	; 0x122e <main>
      74:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <mTimer0_InitNormalMode>:
 * OverFlow Time   = 2^n(CLK Time);
 * Number of Count =  Require time / OverFlow Time
 * PreLoad Value   = 2^n(1-0.y)
 */
void mTimer0_InitNormalMode()
{
      7c:	cf 93       	push	r28
      7e:	df 93       	push	r29
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
	// must be Select Normal Mode
		// 1- Bit WGM00 must be Clear
	  	// 2- Bit WGM01 must be Clear
		ClearBit(TCCR0_Reg,WGM00_Bit);
      84:	83 e5       	ldi	r24, 0x53	; 83
      86:	90 e0       	ldi	r25, 0x00	; 0
      88:	fc 01       	movw	r30, r24
      8a:	20 81       	ld	r18, Z
      8c:	83 e5       	ldi	r24, 0x53	; 83
      8e:	90 e0       	ldi	r25, 0x00	; 0
      90:	2f 7b       	andi	r18, 0xBF	; 191
      92:	fc 01       	movw	r30, r24
      94:	20 83       	st	Z, r18
		ClearBit(TCCR0_Reg,WGM01_Bit);
      96:	83 e5       	ldi	r24, 0x53	; 83
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	fc 01       	movw	r30, r24
      9c:	20 81       	ld	r18, Z
      9e:	83 e5       	ldi	r24, 0x53	; 83
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	27 7f       	andi	r18, 0xF7	; 247
      a4:	fc 01       	movw	r30, r24
      a6:	20 83       	st	Z, r18
	// PreLoad Value
		 TCNT0_Reg = Timer0_PreLoadValue ;
      a8:	82 e5       	ldi	r24, 0x52	; 82
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	20 ec       	ldi	r18, 0xC0	; 192
      ae:	fc 01       	movw	r30, r24
      b0:	20 83       	st	Z, r18
    // Enable the Interrupt
		 	// it TOIE0: must be 1
		 SetBit(TIMSK_Reg,TOIE0_Bit);
      b2:	89 e5       	ldi	r24, 0x59	; 89
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	fc 01       	movw	r30, r24
      b8:	20 81       	ld	r18, Z
      ba:	89 e5       	ldi	r24, 0x59	; 89
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	21 60       	ori	r18, 0x01	; 1
      c0:	fc 01       	movw	r30, r24
      c2:	20 83       	st	Z, r18
	//Select PreScaller Must be Last Line
		// TCCR0 :  7 6 5 4 3 2 1 0
		//TCCR0_Reg = TCCR0_Reg & (0b11111000);
		TCCR0_Reg = TCCR0_Reg & (0xF8);
      c4:	83 e5       	ldi	r24, 0x53	; 83
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	fc 01       	movw	r30, r24
      ca:	20 81       	ld	r18, Z
      cc:	83 e5       	ldi	r24, 0x53	; 83
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	28 7f       	andi	r18, 0xF8	; 248
      d2:	fc 01       	movw	r30, r24
      d4:	20 83       	st	Z, r18
		TCCR0_Reg =TCCR0_Reg | Timer0_Prescaller ;
      d6:	83 e5       	ldi	r24, 0x53	; 83
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	fc 01       	movw	r30, r24
      dc:	20 81       	ld	r18, Z
      de:	83 e5       	ldi	r24, 0x53	; 83
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	21 60       	ori	r18, 0x01	; 1
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
}
      e8:	00 00       	nop
      ea:	df 91       	pop	r29
      ec:	cf 91       	pop	r28
      ee:	08 95       	ret

000000f0 <__vector_11>:

void __vector_11(void)
{
      f0:	1f 92       	push	r1
      f2:	0f 92       	push	r0
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	0f 92       	push	r0
      f8:	11 24       	eor	r1, r1
      fa:	2f 93       	push	r18
      fc:	3f 93       	push	r19
      fe:	4f 93       	push	r20
     100:	5f 93       	push	r21
     102:	6f 93       	push	r22
     104:	7f 93       	push	r23
     106:	8f 93       	push	r24
     108:	9f 93       	push	r25
     10a:	af 93       	push	r26
     10c:	bf 93       	push	r27
     10e:	ef 93       	push	r30
     110:	ff 93       	push	r31
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	cd b7       	in	r28, 0x3d	; 61
     118:	de b7       	in	r29, 0x3e	; 62
	static uint32_t Count = 0 ;
	Count++;
     11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     11e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     122:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     126:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     12a:	01 96       	adiw	r24, 0x01	; 1
     12c:	a1 1d       	adc	r26, r1
     12e:	b1 1d       	adc	r27, r1
     130:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     134:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     138:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     13c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	if (Count==Timer0_NoOfOverFlowCount)
     140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     144:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     148:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     14c:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     150:	83 34       	cpi	r24, 0x43	; 67
     152:	9f 40       	sbci	r25, 0x0F	; 15
     154:	a1 05       	cpc	r26, r1
     156:	b1 05       	cpc	r27, r1
     158:	79 f4       	brne	.+30     	; 0x178 <__vector_11+0x88>
	{
		//Action
		aLed_Action1();
     15a:	0e 94 4a 09 	call	0x1294	; 0x1294 <aLed_Action1>
		//PreLoad Update
		TCNT0_Reg = Timer0_PreLoadValue;
     15e:	82 e5       	ldi	r24, 0x52	; 82
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	20 ec       	ldi	r18, 0xC0	; 192
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18
		//Clear Count
		Count = 0 ;
     168:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     16c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     170:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     174:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	}
}
     178:	00 00       	nop
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	ff 91       	pop	r31
     180:	ef 91       	pop	r30
     182:	bf 91       	pop	r27
     184:	af 91       	pop	r26
     186:	9f 91       	pop	r25
     188:	8f 91       	pop	r24
     18a:	7f 91       	pop	r23
     18c:	6f 91       	pop	r22
     18e:	5f 91       	pop	r21
     190:	4f 91       	pop	r20
     192:	3f 91       	pop	r19
     194:	2f 91       	pop	r18
     196:	0f 90       	pop	r0
     198:	0f be       	out	0x3f, r0	; 63
     19a:	0f 90       	pop	r0
     19c:	1f 90       	pop	r1
     19e:	18 95       	reti

000001a0 <mTimer0_InitCTCMode>:
 * PreLoad Value   = 2^n(1-0.y)
 */


void mTimer0_InitCTCMode()
{
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62

	// must be Select CTC Mode
		// 1- Bit WGM00 must be Clear
	  	// 2- Bit WGM01 must be Set
	ClearBit(TCCR0_Reg,WGM00_Bit);
     1a8:	83 e5       	ldi	r24, 0x53	; 83
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 81       	ld	r18, Z
     1b0:	83 e5       	ldi	r24, 0x53	; 83
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	2f 7b       	andi	r18, 0xBF	; 191
     1b6:	fc 01       	movw	r30, r24
     1b8:	20 83       	st	Z, r18
	SetBit(TCCR0_Reg,WGM01_Bit);
     1ba:	83 e5       	ldi	r24, 0x53	; 83
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	fc 01       	movw	r30, r24
     1c0:	20 81       	ld	r18, Z
     1c2:	83 e5       	ldi	r24, 0x53	; 83
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	28 60       	ori	r18, 0x08	; 8
     1c8:	fc 01       	movw	r30, r24
     1ca:	20 83       	st	Z, r18
	// Compare Value
		// Update the OCR0 By Compare Value
		OCR0_Reg = Timer0_CompareValue;
     1cc:	8c e5       	ldi	r24, 0x5C	; 92
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	2a ef       	ldi	r18, 0xFA	; 250
     1d2:	fc 01       	movw	r30, r24
     1d4:	20 83       	st	Z, r18
    // Enable the Interrupt
		 	// it OCIE0: must be 1
		SetBit(TIMSK_Reg,OCIE0_Bit);
     1d6:	89 e5       	ldi	r24, 0x59	; 89
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	fc 01       	movw	r30, r24
     1dc:	20 81       	ld	r18, Z
     1de:	89 e5       	ldi	r24, 0x59	; 89
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	22 60       	ori	r18, 0x02	; 2
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 83       	st	Z, r18
	//Select PreScaller Must be Last Line
		// TCCR0 :  7 6 5 4 3 2 1 0
		//TCCR0_Reg = TCCR0_Reg & (0b11111000);
		TCCR0_Reg &=(0xF8);
     1e8:	83 e5       	ldi	r24, 0x53	; 83
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	fc 01       	movw	r30, r24
     1ee:	20 81       	ld	r18, Z
     1f0:	83 e5       	ldi	r24, 0x53	; 83
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	28 7f       	andi	r18, 0xF8	; 248
     1f6:	fc 01       	movw	r30, r24
     1f8:	20 83       	st	Z, r18
		TCCR0_Reg |=(Timer0_Prescaller);
     1fa:	83 e5       	ldi	r24, 0x53	; 83
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	fc 01       	movw	r30, r24
     200:	20 81       	ld	r18, Z
     202:	83 e5       	ldi	r24, 0x53	; 83
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	21 60       	ori	r18, 0x01	; 1
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18

}
     20c:	00 00       	nop
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <__vector_10>:


void __vector_10(void)
{
     214:	1f 92       	push	r1
     216:	0f 92       	push	r0
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	0f 92       	push	r0
     21c:	11 24       	eor	r1, r1
     21e:	2f 93       	push	r18
     220:	3f 93       	push	r19
     222:	4f 93       	push	r20
     224:	5f 93       	push	r21
     226:	6f 93       	push	r22
     228:	7f 93       	push	r23
     22a:	8f 93       	push	r24
     22c:	9f 93       	push	r25
     22e:	af 93       	push	r26
     230:	bf 93       	push	r27
     232:	ef 93       	push	r30
     234:	ff 93       	push	r31
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
	static uint32_t Count = 0 ;
	Count++;
     23e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Count.1511>
     242:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Count.1511+0x1>
     246:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <Count.1511+0x2>
     24a:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <Count.1511+0x3>
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	a1 1d       	adc	r26, r1
     252:	b1 1d       	adc	r27, r1
     254:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Count.1511>
     258:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Count.1511+0x1>
     25c:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <Count.1511+0x2>
     260:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <Count.1511+0x3>
	if(Count==Timer0_NoOFCompateMatchCount)
     264:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Count.1511>
     268:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Count.1511+0x1>
     26c:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <Count.1511+0x2>
     270:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <Count.1511+0x3>
     274:	80 3a       	cpi	r24, 0xA0	; 160
     276:	9f 40       	sbci	r25, 0x0F	; 15
     278:	a1 05       	cpc	r26, r1
     27a:	b1 05       	cpc	r27, r1
     27c:	51 f4       	brne	.+20     	; 0x292 <__vector_10+0x7e>
	{
		//Action
		aLed_Action1();
     27e:	0e 94 4a 09 	call	0x1294	; 0x1294 <aLed_Action1>
		//Clear Counter
		Count=0;
     282:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Count.1511>
     286:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Count.1511+0x1>
     28a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Count.1511+0x2>
     28e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Count.1511+0x3>
	}
}
     292:	00 00       	nop
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	ff 91       	pop	r31
     29a:	ef 91       	pop	r30
     29c:	bf 91       	pop	r27
     29e:	af 91       	pop	r26
     2a0:	9f 91       	pop	r25
     2a2:	8f 91       	pop	r24
     2a4:	7f 91       	pop	r23
     2a6:	6f 91       	pop	r22
     2a8:	5f 91       	pop	r21
     2aa:	4f 91       	pop	r20
     2ac:	3f 91       	pop	r19
     2ae:	2f 91       	pop	r18
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <mGIE_Enable>:
#include "../../../../Timers/Inc/MCAL/GIE/GIE_Interface.h"



void mGIE_Enable()
{
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
	SetBit(SREG_Reg,GIE_Bit);
     2c2:	8f e5       	ldi	r24, 0x5F	; 95
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 81       	ld	r18, Z
     2ca:	8f e5       	ldi	r24, 0x5F	; 95
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	20 68       	ori	r18, 0x80	; 128
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 83       	st	Z, r18
}
     2d4:	00 00       	nop
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <mGIE_Disable>:
void mGIE_Disable()
{
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
	ClearBit(SREG_Reg,GIE_Bit);
     2e4:	8f e5       	ldi	r24, 0x5F	; 95
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 81       	ld	r18, Z
     2ec:	8f e5       	ldi	r24, 0x5F	; 95
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2f 77       	andi	r18, 0x7F	; 127
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
}
     2f6:	00 00       	nop
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <mEXTI0_Enable>:
#include "../../../../Timers/Inc/MCAL/EXTI/EXTI_Interface.h"
#include "../../../../Timers/Inc/MCAL/NTI_Atmega32Register.h"


void mEXTI0_Enable(uint8_t SensControl)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	89 83       	std	Y+1, r24	; 0x01

}
     30a:	00 00       	nop
     30c:	0f 90       	pop	r0
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <mEXTI1_Enable>:

void mEXTI1_Enable(uint8_t SensControl)
{
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	1f 92       	push	r1
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	89 83       	std	Y+1, r24	; 0x01

}
     320:	00 00       	nop
     322:	0f 90       	pop	r0
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <mEXTI2_Enable>:

void mEXTI2_Enable(uint8_t SensControl)
{
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	1f 92       	push	r1
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	89 83       	std	Y+1, r24	; 0x01
//	 * 				Bit 6 in MCUCSR Register must be 0
//	 * 			if SensControl == 3
//	 * 				Bit 6 in MCUCSR Register must be 1
//	 * 		2- Enable the SIE For EXTI2
//	 * 			Bit 5 in GICR Resister  must be One
	if(SensControl==EXTI_Falling)
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	82 30       	cpi	r24, 0x02	; 2
     33a:	51 f4       	brne	.+20     	; 0x350 <mEXTI2_Enable+0x26>
	{
		ClearBit(MCUCSR_Reg,EXTI_ISC2);
     33c:	84 e5       	ldi	r24, 0x54	; 84
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	fc 01       	movw	r30, r24
     342:	20 81       	ld	r18, Z
     344:	84 e5       	ldi	r24, 0x54	; 84
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	2f 7b       	andi	r18, 0xBF	; 191
     34a:	fc 01       	movw	r30, r24
     34c:	20 83       	st	Z, r18
     34e:	0c c0       	rjmp	.+24     	; 0x368 <mEXTI2_Enable+0x3e>
	}
	else if (SensControl==EXTI_Rising)
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	83 30       	cpi	r24, 0x03	; 3
     354:	49 f4       	brne	.+18     	; 0x368 <mEXTI2_Enable+0x3e>
	{
		SetBit(MCUCSR_Reg,EXTI_ISC2);
     356:	84 e5       	ldi	r24, 0x54	; 84
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	fc 01       	movw	r30, r24
     35c:	20 81       	ld	r18, Z
     35e:	84 e5       	ldi	r24, 0x54	; 84
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	20 64       	ori	r18, 0x40	; 64
     364:	fc 01       	movw	r30, r24
     366:	20 83       	st	Z, r18
	}
	else
	{
		// Not Vaild Options
	}
	SetBit(GICR_Reg,EXTI_INT2);
     368:	8b e5       	ldi	r24, 0x5B	; 91
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	fc 01       	movw	r30, r24
     36e:	20 81       	ld	r18, Z
     370:	8b e5       	ldi	r24, 0x5B	; 91
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	20 62       	ori	r18, 0x20	; 32
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
}
     37a:	00 00       	nop
     37c:	0f 90       	pop	r0
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <mDIO_ChangeDirectionForPin>:
#include "../../../../Timers/Inc/Common/BitMath.h"
#include "../../../../Timers/Inc/MCAL/DIO/DIO_Interface.h"
#include "../../../../Timers/Inc/MCAL/NTI_Atmega32Register.h"

void mDIO_ChangeDirectionForPin(uint8_t GroupName , uint8_t PinNumber , uint8_t DirectionState)
{
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <mDIO_ChangeDirectionForPin+0x6>
     38a:	1f 92       	push	r1
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	89 83       	std	Y+1, r24	; 0x01
     392:	6a 83       	std	Y+2, r22	; 0x02
     394:	4b 83       	std	Y+3, r20	; 0x03
	if(PinNumber>= Pin0 && PinNumber <=Pin7)
     396:	8a 81       	ldd	r24, Y+2	; 0x02
     398:	88 30       	cpi	r24, 0x08	; 8
     39a:	08 f0       	brcs	.+2      	; 0x39e <mDIO_ChangeDirectionForPin+0x1a>
     39c:	e2 c0       	rjmp	.+452    	; 0x562 <__stack+0x103>
	{
		if (DirectionState==DIO_Output)
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	81 30       	cpi	r24, 0x01	; 1
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <mDIO_ChangeDirectionForPin+0x22>
     3a4:	6b c0       	rjmp	.+214    	; 0x47c <__stack+0x1d>
		{
			switch(GroupName)
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	88 2f       	mov	r24, r24
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	82 30       	cpi	r24, 0x02	; 2
     3ae:	91 05       	cpc	r25, r1
     3b0:	19 f1       	breq	.+70     	; 0x3f8 <mDIO_ChangeDirectionForPin+0x74>
     3b2:	83 30       	cpi	r24, 0x03	; 3
     3b4:	91 05       	cpc	r25, r1
     3b6:	1c f4       	brge	.+6      	; 0x3be <mDIO_ChangeDirectionForPin+0x3a>
     3b8:	01 97       	sbiw	r24, 0x01	; 1
     3ba:	41 f0       	breq	.+16     	; 0x3cc <mDIO_ChangeDirectionForPin+0x48>
			case GroupA: SetBit(DDRA_Reg,PinNumber);break;
			case GroupB: SetBit(DDRB_Reg,PinNumber);break;
			case GroupC: SetBit(DDRC_Reg,PinNumber);break;
			case GroupD: SetBit(DDRD_Reg,PinNumber);break;
			default :  // GroupName Outof Rang
				break;
     3bc:	d2 c0       	rjmp	.+420    	; 0x562 <__stack+0x103>
{
	if(PinNumber>= Pin0 && PinNumber <=Pin7)
	{
		if (DirectionState==DIO_Output)
		{
			switch(GroupName)
     3be:	83 30       	cpi	r24, 0x03	; 3
     3c0:	91 05       	cpc	r25, r1
     3c2:	81 f1       	breq	.+96     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
     3c4:	04 97       	sbiw	r24, 0x04	; 4
     3c6:	09 f4       	brne	.+2      	; 0x3ca <mDIO_ChangeDirectionForPin+0x46>
     3c8:	43 c0       	rjmp	.+134    	; 0x450 <__DATA_REGION_LENGTH__+0x50>
			case GroupA: SetBit(DDRA_Reg,PinNumber);break;
			case GroupB: SetBit(DDRB_Reg,PinNumber);break;
			case GroupC: SetBit(DDRC_Reg,PinNumber);break;
			case GroupD: SetBit(DDRD_Reg,PinNumber);break;
			default :  // GroupName Outof Rang
				break;
     3ca:	cb c0       	rjmp	.+406    	; 0x562 <__stack+0x103>
	{
		if (DirectionState==DIO_Output)
		{
			switch(GroupName)
			{
			case GroupA: SetBit(DDRA_Reg,PinNumber);break;
     3cc:	8a e3       	ldi	r24, 0x3A	; 58
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	fc 01       	movw	r30, r24
     3d2:	80 81       	ld	r24, Z
     3d4:	48 2f       	mov	r20, r24
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	28 2f       	mov	r18, r24
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <mDIO_ChangeDirectionForPin+0x62>
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	2a 95       	dec	r18
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <mDIO_ChangeDirectionForPin+0x5e>
     3ea:	24 2f       	mov	r18, r20
     3ec:	28 2b       	or	r18, r24
     3ee:	8a e3       	ldi	r24, 0x3A	; 58
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
     3f6:	b5 c0       	rjmp	.+362    	; 0x562 <__stack+0x103>
			case GroupB: SetBit(DDRB_Reg,PinNumber);break;
     3f8:	87 e3       	ldi	r24, 0x37	; 55
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	fc 01       	movw	r30, r24
     3fe:	80 81       	ld	r24, Z
     400:	48 2f       	mov	r20, r24
     402:	8a 81       	ldd	r24, Y+2	; 0x02
     404:	28 2f       	mov	r18, r24
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__DATA_REGION_LENGTH__+0x12>
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	2a 95       	dec	r18
     414:	e2 f7       	brpl	.-8      	; 0x40e <__DATA_REGION_LENGTH__+0xe>
     416:	24 2f       	mov	r18, r20
     418:	28 2b       	or	r18, r24
     41a:	87 e3       	ldi	r24, 0x37	; 55
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	fc 01       	movw	r30, r24
     420:	20 83       	st	Z, r18
     422:	9f c0       	rjmp	.+318    	; 0x562 <__stack+0x103>
			case GroupC: SetBit(DDRC_Reg,PinNumber);break;
     424:	84 e3       	ldi	r24, 0x34	; 52
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	fc 01       	movw	r30, r24
     42a:	80 81       	ld	r24, Z
     42c:	48 2f       	mov	r20, r24
     42e:	8a 81       	ldd	r24, Y+2	; 0x02
     430:	28 2f       	mov	r18, r24
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	02 c0       	rjmp	.+4      	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	2a 95       	dec	r18
     440:	e2 f7       	brpl	.-8      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
     442:	24 2f       	mov	r18, r20
     444:	28 2b       	or	r18, r24
     446:	84 e3       	ldi	r24, 0x34	; 52
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	fc 01       	movw	r30, r24
     44c:	20 83       	st	Z, r18
     44e:	89 c0       	rjmp	.+274    	; 0x562 <__stack+0x103>
			case GroupD: SetBit(DDRD_Reg,PinNumber);break;
     450:	81 e3       	ldi	r24, 0x31	; 49
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	fc 01       	movw	r30, r24
     456:	80 81       	ld	r24, Z
     458:	48 2f       	mov	r20, r24
     45a:	8a 81       	ldd	r24, Y+2	; 0x02
     45c:	28 2f       	mov	r18, r24
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	02 c0       	rjmp	.+4      	; 0x46a <__stack+0xb>
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	2a 95       	dec	r18
     46c:	e2 f7       	brpl	.-8      	; 0x466 <__stack+0x7>
     46e:	24 2f       	mov	r18, r20
     470:	28 2b       	or	r18, r24
     472:	81 e3       	ldi	r24, 0x31	; 49
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	fc 01       	movw	r30, r24
     478:	20 83       	st	Z, r18
     47a:	73 c0       	rjmp	.+230    	; 0x562 <__stack+0x103>
			default :  // GroupName Outof Rang
				break;
			}
		}
		else if (DirectionState==DIO_Input)
     47c:	8b 81       	ldd	r24, Y+3	; 0x03
     47e:	88 23       	and	r24, r24
     480:	09 f0       	breq	.+2      	; 0x484 <__stack+0x25>
     482:	6f c0       	rjmp	.+222    	; 0x562 <__stack+0x103>
		{
			switch(GroupName)
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	88 2f       	mov	r24, r24
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	91 05       	cpc	r25, r1
     48e:	21 f1       	breq	.+72     	; 0x4d8 <__stack+0x79>
     490:	83 30       	cpi	r24, 0x03	; 3
     492:	91 05       	cpc	r25, r1
     494:	1c f4       	brge	.+6      	; 0x49c <__stack+0x3d>
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	41 f0       	breq	.+16     	; 0x4aa <__stack+0x4b>
			case GroupA: ClearBit(DDRA_Reg ,PinNumber);break;
			case GroupB: ClearBit(DDRB_Reg,PinNumber);break;
			case GroupC: ClearBit(DDRC_Reg,PinNumber);break;
			case GroupD: ClearBit(DDRD_Reg,PinNumber);break;
			default :  // GroupName Outof Rang
				break;
     49a:	63 c0       	rjmp	.+198    	; 0x562 <__stack+0x103>
				break;
			}
		}
		else if (DirectionState==DIO_Input)
		{
			switch(GroupName)
     49c:	83 30       	cpi	r24, 0x03	; 3
     49e:	91 05       	cpc	r25, r1
     4a0:	91 f1       	breq	.+100    	; 0x506 <__stack+0xa7>
     4a2:	04 97       	sbiw	r24, 0x04	; 4
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <__stack+0x49>
     4a6:	46 c0       	rjmp	.+140    	; 0x534 <__stack+0xd5>
			case GroupA: ClearBit(DDRA_Reg ,PinNumber);break;
			case GroupB: ClearBit(DDRB_Reg,PinNumber);break;
			case GroupC: ClearBit(DDRC_Reg,PinNumber);break;
			case GroupD: ClearBit(DDRD_Reg,PinNumber);break;
			default :  // GroupName Outof Rang
				break;
     4a8:	5c c0       	rjmp	.+184    	; 0x562 <__stack+0x103>
		}
		else if (DirectionState==DIO_Input)
		{
			switch(GroupName)
			{
			case GroupA: ClearBit(DDRA_Reg ,PinNumber);break;
     4aa:	8a e3       	ldi	r24, 0x3A	; 58
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	fc 01       	movw	r30, r24
     4b0:	80 81       	ld	r24, Z
     4b2:	48 2f       	mov	r20, r24
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	28 2f       	mov	r18, r24
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__stack+0x65>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	2a 95       	dec	r18
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__stack+0x61>
     4c8:	80 95       	com	r24
     4ca:	24 2f       	mov	r18, r20
     4cc:	28 23       	and	r18, r24
     4ce:	8a e3       	ldi	r24, 0x3A	; 58
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
     4d6:	45 c0       	rjmp	.+138    	; 0x562 <__stack+0x103>
			case GroupB: ClearBit(DDRB_Reg,PinNumber);break;
     4d8:	87 e3       	ldi	r24, 0x37	; 55
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	fc 01       	movw	r30, r24
     4de:	80 81       	ld	r24, Z
     4e0:	48 2f       	mov	r20, r24
     4e2:	8a 81       	ldd	r24, Y+2	; 0x02
     4e4:	28 2f       	mov	r18, r24
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__stack+0x93>
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	2a 95       	dec	r18
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <__stack+0x8f>
     4f6:	80 95       	com	r24
     4f8:	24 2f       	mov	r18, r20
     4fa:	28 23       	and	r18, r24
     4fc:	87 e3       	ldi	r24, 0x37	; 55
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18
     504:	2e c0       	rjmp	.+92     	; 0x562 <__stack+0x103>
			case GroupC: ClearBit(DDRC_Reg,PinNumber);break;
     506:	84 e3       	ldi	r24, 0x34	; 52
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	fc 01       	movw	r30, r24
     50c:	80 81       	ld	r24, Z
     50e:	48 2f       	mov	r20, r24
     510:	8a 81       	ldd	r24, Y+2	; 0x02
     512:	28 2f       	mov	r18, r24
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	02 c0       	rjmp	.+4      	; 0x520 <__stack+0xc1>
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	2a 95       	dec	r18
     522:	e2 f7       	brpl	.-8      	; 0x51c <__stack+0xbd>
     524:	80 95       	com	r24
     526:	24 2f       	mov	r18, r20
     528:	28 23       	and	r18, r24
     52a:	84 e3       	ldi	r24, 0x34	; 52
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
     532:	17 c0       	rjmp	.+46     	; 0x562 <__stack+0x103>
			case GroupD: ClearBit(DDRD_Reg,PinNumber);break;
     534:	81 e3       	ldi	r24, 0x31	; 49
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	fc 01       	movw	r30, r24
     53a:	80 81       	ld	r24, Z
     53c:	48 2f       	mov	r20, r24
     53e:	8a 81       	ldd	r24, Y+2	; 0x02
     540:	28 2f       	mov	r18, r24
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	02 c0       	rjmp	.+4      	; 0x54e <__stack+0xef>
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	2a 95       	dec	r18
     550:	e2 f7       	brpl	.-8      	; 0x54a <__stack+0xeb>
     552:	80 95       	com	r24
     554:	24 2f       	mov	r18, r20
     556:	28 23       	and	r18, r24
     558:	81 e3       	ldi	r24, 0x31	; 49
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
     560:	00 00       	nop
	else
	{
		// Pin Number Outof Range
	}

}
     562:	00 00       	nop
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <mDIO_WriteValueForPin>:
void mDIO_WriteValueForPin(uint8_t GroupName ,  uint8_t PinNumber , uint8_t OutputType)
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	00 d0       	rcall	.+0      	; 0x576 <mDIO_WriteValueForPin+0x6>
     576:	1f 92       	push	r1
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	89 83       	std	Y+1, r24	; 0x01
     57e:	6a 83       	std	Y+2, r22	; 0x02
     580:	4b 83       	std	Y+3, r20	; 0x03
	//	Task2
	if(PinNumber>= Pin0 && PinNumber <=Pin7)
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	88 30       	cpi	r24, 0x08	; 8
     586:	08 f0       	brcs	.+2      	; 0x58a <mDIO_WriteValueForPin+0x1a>
     588:	e2 c0       	rjmp	.+452    	; 0x74e <mDIO_WriteValueForPin+0x1de>
	{
		if (OutputType==DIO_Output)
     58a:	8b 81       	ldd	r24, Y+3	; 0x03
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	09 f0       	breq	.+2      	; 0x592 <mDIO_WriteValueForPin+0x22>
     590:	6b c0       	rjmp	.+214    	; 0x668 <mDIO_WriteValueForPin+0xf8>
		{
			switch(GroupName)
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	91 05       	cpc	r25, r1
     59c:	19 f1       	breq	.+70     	; 0x5e4 <mDIO_WriteValueForPin+0x74>
     59e:	83 30       	cpi	r24, 0x03	; 3
     5a0:	91 05       	cpc	r25, r1
     5a2:	1c f4       	brge	.+6      	; 0x5aa <mDIO_WriteValueForPin+0x3a>
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	41 f0       	breq	.+16     	; 0x5b8 <mDIO_WriteValueForPin+0x48>
			case GroupA: SetBit(PORTA_Reg,PinNumber);break;
			case GroupB: SetBit(PORTB_Reg,PinNumber);break;
			case GroupC: SetBit(PORTC_Reg,PinNumber);break;
			case GroupD: SetBit(PORTD_Reg,PinNumber);break;
			default :  // GroupName Outof Rang
				break;
     5a8:	d2 c0       	rjmp	.+420    	; 0x74e <mDIO_WriteValueForPin+0x1de>
	//	Task2
	if(PinNumber>= Pin0 && PinNumber <=Pin7)
	{
		if (OutputType==DIO_Output)
		{
			switch(GroupName)
     5aa:	83 30       	cpi	r24, 0x03	; 3
     5ac:	91 05       	cpc	r25, r1
     5ae:	81 f1       	breq	.+96     	; 0x610 <mDIO_WriteValueForPin+0xa0>
     5b0:	04 97       	sbiw	r24, 0x04	; 4
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <mDIO_WriteValueForPin+0x46>
     5b4:	43 c0       	rjmp	.+134    	; 0x63c <mDIO_WriteValueForPin+0xcc>
			case GroupA: SetBit(PORTA_Reg,PinNumber);break;
			case GroupB: SetBit(PORTB_Reg,PinNumber);break;
			case GroupC: SetBit(PORTC_Reg,PinNumber);break;
			case GroupD: SetBit(PORTD_Reg,PinNumber);break;
			default :  // GroupName Outof Rang
				break;
     5b6:	cb c0       	rjmp	.+406    	; 0x74e <mDIO_WriteValueForPin+0x1de>
	{
		if (OutputType==DIO_Output)
		{
			switch(GroupName)
			{
			case GroupA: SetBit(PORTA_Reg,PinNumber);break;
     5b8:	8b e3       	ldi	r24, 0x3B	; 59
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	fc 01       	movw	r30, r24
     5be:	80 81       	ld	r24, Z
     5c0:	48 2f       	mov	r20, r24
     5c2:	8a 81       	ldd	r24, Y+2	; 0x02
     5c4:	28 2f       	mov	r18, r24
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <mDIO_WriteValueForPin+0x62>
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	2a 95       	dec	r18
     5d4:	e2 f7       	brpl	.-8      	; 0x5ce <mDIO_WriteValueForPin+0x5e>
     5d6:	24 2f       	mov	r18, r20
     5d8:	28 2b       	or	r18, r24
     5da:	8b e3       	ldi	r24, 0x3B	; 59
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	fc 01       	movw	r30, r24
     5e0:	20 83       	st	Z, r18
     5e2:	b5 c0       	rjmp	.+362    	; 0x74e <mDIO_WriteValueForPin+0x1de>
			case GroupB: SetBit(PORTB_Reg,PinNumber);break;
     5e4:	88 e3       	ldi	r24, 0x38	; 56
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	fc 01       	movw	r30, r24
     5ea:	80 81       	ld	r24, Z
     5ec:	48 2f       	mov	r20, r24
     5ee:	8a 81       	ldd	r24, Y+2	; 0x02
     5f0:	28 2f       	mov	r18, r24
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <mDIO_WriteValueForPin+0x8e>
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	2a 95       	dec	r18
     600:	e2 f7       	brpl	.-8      	; 0x5fa <mDIO_WriteValueForPin+0x8a>
     602:	24 2f       	mov	r18, r20
     604:	28 2b       	or	r18, r24
     606:	88 e3       	ldi	r24, 0x38	; 56
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
     60e:	9f c0       	rjmp	.+318    	; 0x74e <mDIO_WriteValueForPin+0x1de>
			case GroupC: SetBit(PORTC_Reg,PinNumber);break;
     610:	85 e3       	ldi	r24, 0x35	; 53
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	fc 01       	movw	r30, r24
     616:	80 81       	ld	r24, Z
     618:	48 2f       	mov	r20, r24
     61a:	8a 81       	ldd	r24, Y+2	; 0x02
     61c:	28 2f       	mov	r18, r24
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	02 c0       	rjmp	.+4      	; 0x62a <mDIO_WriteValueForPin+0xba>
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	2a 95       	dec	r18
     62c:	e2 f7       	brpl	.-8      	; 0x626 <mDIO_WriteValueForPin+0xb6>
     62e:	24 2f       	mov	r18, r20
     630:	28 2b       	or	r18, r24
     632:	85 e3       	ldi	r24, 0x35	; 53
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	fc 01       	movw	r30, r24
     638:	20 83       	st	Z, r18
     63a:	89 c0       	rjmp	.+274    	; 0x74e <mDIO_WriteValueForPin+0x1de>
			case GroupD: SetBit(PORTD_Reg,PinNumber);break;
     63c:	82 e3       	ldi	r24, 0x32	; 50
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	fc 01       	movw	r30, r24
     642:	80 81       	ld	r24, Z
     644:	48 2f       	mov	r20, r24
     646:	8a 81       	ldd	r24, Y+2	; 0x02
     648:	28 2f       	mov	r18, r24
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	02 c0       	rjmp	.+4      	; 0x656 <mDIO_WriteValueForPin+0xe6>
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	2a 95       	dec	r18
     658:	e2 f7       	brpl	.-8      	; 0x652 <mDIO_WriteValueForPin+0xe2>
     65a:	24 2f       	mov	r18, r20
     65c:	28 2b       	or	r18, r24
     65e:	82 e3       	ldi	r24, 0x32	; 50
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	fc 01       	movw	r30, r24
     664:	20 83       	st	Z, r18
     666:	73 c0       	rjmp	.+230    	; 0x74e <mDIO_WriteValueForPin+0x1de>
			default :  // GroupName Outof Rang
				break;
			}
		}
		else if (OutputType==DIO_Input)
     668:	8b 81       	ldd	r24, Y+3	; 0x03
     66a:	88 23       	and	r24, r24
     66c:	09 f0       	breq	.+2      	; 0x670 <mDIO_WriteValueForPin+0x100>
     66e:	6f c0       	rjmp	.+222    	; 0x74e <mDIO_WriteValueForPin+0x1de>
		{
			switch(GroupName)
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	88 2f       	mov	r24, r24
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	91 05       	cpc	r25, r1
     67a:	21 f1       	breq	.+72     	; 0x6c4 <mDIO_WriteValueForPin+0x154>
     67c:	83 30       	cpi	r24, 0x03	; 3
     67e:	91 05       	cpc	r25, r1
     680:	1c f4       	brge	.+6      	; 0x688 <mDIO_WriteValueForPin+0x118>
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	41 f0       	breq	.+16     	; 0x696 <mDIO_WriteValueForPin+0x126>
			case GroupA: ClearBit(PORTA_Reg ,PinNumber);break;
			case GroupB: ClearBit(PORTB_Reg,PinNumber);break;
			case GroupC: ClearBit(PORTC_Reg,PinNumber);break;
			case GroupD: ClearBit(PORTD_Reg,PinNumber);break;
			default :  // GroupName Outof Rang
				break;
     686:	63 c0       	rjmp	.+198    	; 0x74e <mDIO_WriteValueForPin+0x1de>
				break;
			}
		}
		else if (OutputType==DIO_Input)
		{
			switch(GroupName)
     688:	83 30       	cpi	r24, 0x03	; 3
     68a:	91 05       	cpc	r25, r1
     68c:	91 f1       	breq	.+100    	; 0x6f2 <mDIO_WriteValueForPin+0x182>
     68e:	04 97       	sbiw	r24, 0x04	; 4
     690:	09 f4       	brne	.+2      	; 0x694 <mDIO_WriteValueForPin+0x124>
     692:	46 c0       	rjmp	.+140    	; 0x720 <mDIO_WriteValueForPin+0x1b0>
			case GroupA: ClearBit(PORTA_Reg ,PinNumber);break;
			case GroupB: ClearBit(PORTB_Reg,PinNumber);break;
			case GroupC: ClearBit(PORTC_Reg,PinNumber);break;
			case GroupD: ClearBit(PORTD_Reg,PinNumber);break;
			default :  // GroupName Outof Rang
				break;
     694:	5c c0       	rjmp	.+184    	; 0x74e <mDIO_WriteValueForPin+0x1de>
		}
		else if (OutputType==DIO_Input)
		{
			switch(GroupName)
			{
			case GroupA: ClearBit(PORTA_Reg ,PinNumber);break;
     696:	8b e3       	ldi	r24, 0x3B	; 59
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	fc 01       	movw	r30, r24
     69c:	80 81       	ld	r24, Z
     69e:	48 2f       	mov	r20, r24
     6a0:	8a 81       	ldd	r24, Y+2	; 0x02
     6a2:	28 2f       	mov	r18, r24
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <mDIO_WriteValueForPin+0x140>
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	2a 95       	dec	r18
     6b2:	e2 f7       	brpl	.-8      	; 0x6ac <mDIO_WriteValueForPin+0x13c>
     6b4:	80 95       	com	r24
     6b6:	24 2f       	mov	r18, r20
     6b8:	28 23       	and	r18, r24
     6ba:	8b e3       	ldi	r24, 0x3B	; 59
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18
     6c2:	45 c0       	rjmp	.+138    	; 0x74e <mDIO_WriteValueForPin+0x1de>
			case GroupB: ClearBit(PORTB_Reg,PinNumber);break;
     6c4:	88 e3       	ldi	r24, 0x38	; 56
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	fc 01       	movw	r30, r24
     6ca:	80 81       	ld	r24, Z
     6cc:	48 2f       	mov	r20, r24
     6ce:	8a 81       	ldd	r24, Y+2	; 0x02
     6d0:	28 2f       	mov	r18, r24
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <mDIO_WriteValueForPin+0x16e>
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	2a 95       	dec	r18
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <mDIO_WriteValueForPin+0x16a>
     6e2:	80 95       	com	r24
     6e4:	24 2f       	mov	r18, r20
     6e6:	28 23       	and	r18, r24
     6e8:	88 e3       	ldi	r24, 0x38	; 56
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
     6f0:	2e c0       	rjmp	.+92     	; 0x74e <mDIO_WriteValueForPin+0x1de>
			case GroupC: ClearBit(PORTC_Reg,PinNumber);break;
     6f2:	85 e3       	ldi	r24, 0x35	; 53
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	fc 01       	movw	r30, r24
     6f8:	80 81       	ld	r24, Z
     6fa:	48 2f       	mov	r20, r24
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	28 2f       	mov	r18, r24
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	02 c0       	rjmp	.+4      	; 0x70c <mDIO_WriteValueForPin+0x19c>
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	2a 95       	dec	r18
     70e:	e2 f7       	brpl	.-8      	; 0x708 <mDIO_WriteValueForPin+0x198>
     710:	80 95       	com	r24
     712:	24 2f       	mov	r18, r20
     714:	28 23       	and	r18, r24
     716:	85 e3       	ldi	r24, 0x35	; 53
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18
     71e:	17 c0       	rjmp	.+46     	; 0x74e <mDIO_WriteValueForPin+0x1de>
			case GroupD: ClearBit(PORTD_Reg,PinNumber);break;
     720:	82 e3       	ldi	r24, 0x32	; 50
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	fc 01       	movw	r30, r24
     726:	80 81       	ld	r24, Z
     728:	48 2f       	mov	r20, r24
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	28 2f       	mov	r18, r24
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	02 c0       	rjmp	.+4      	; 0x73a <mDIO_WriteValueForPin+0x1ca>
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	2a 95       	dec	r18
     73c:	e2 f7       	brpl	.-8      	; 0x736 <mDIO_WriteValueForPin+0x1c6>
     73e:	80 95       	com	r24
     740:	24 2f       	mov	r18, r20
     742:	28 23       	and	r18, r24
     744:	82 e3       	ldi	r24, 0x32	; 50
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
     74c:	00 00       	nop
	}
	else
	{
		// Pin Number Outof Range
	}
}
     74e:	00 00       	nop
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <mDIO_ReadValueFromPin>:
uint8_t mDIO_ReadValueFromPin(uint8_t  GroupName, uint8_t PinNumber)
{
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	00 d0       	rcall	.+0      	; 0x762 <mDIO_ReadValueFromPin+0x6>
     762:	1f 92       	push	r1
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
     768:	8a 83       	std	Y+2, r24	; 0x02
     76a:	6b 83       	std	Y+3, r22	; 0x03
	// Task3
	uint8_t InputValue ;
	if(PinNumber>= Pin0 && PinNumber <=Pin7)
     76c:	8b 81       	ldd	r24, Y+3	; 0x03
     76e:	88 30       	cpi	r24, 0x08	; 8
     770:	08 f0       	brcs	.+2      	; 0x774 <mDIO_ReadValueFromPin+0x18>
     772:	56 c0       	rjmp	.+172    	; 0x820 <mDIO_ReadValueFromPin+0xc4>
	{
		switch(GroupName)
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	88 2f       	mov	r24, r24
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	91 05       	cpc	r25, r1
     77e:	e9 f0       	breq	.+58     	; 0x7ba <mDIO_ReadValueFromPin+0x5e>
     780:	83 30       	cpi	r24, 0x03	; 3
     782:	91 05       	cpc	r25, r1
     784:	1c f4       	brge	.+6      	; 0x78c <mDIO_ReadValueFromPin+0x30>
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	39 f0       	breq	.+14     	; 0x798 <mDIO_ReadValueFromPin+0x3c>
		case GroupA:InputValue=GetBit(PINA_Reg ,PinNumber);break;
		case GroupB:InputValue=GetBit(PINB_Reg,PinNumber);break;
		case GroupC:InputValue=GetBit(PINC_Reg,PinNumber);break;
		case GroupD:InputValue=GetBit(PIND_Reg,PinNumber);break;
		default :  // GroupName Outof Rang
			break;
     78a:	4b c0       	rjmp	.+150    	; 0x822 <mDIO_ReadValueFromPin+0xc6>
{
	// Task3
	uint8_t InputValue ;
	if(PinNumber>= Pin0 && PinNumber <=Pin7)
	{
		switch(GroupName)
     78c:	83 30       	cpi	r24, 0x03	; 3
     78e:	91 05       	cpc	r25, r1
     790:	29 f1       	breq	.+74     	; 0x7dc <mDIO_ReadValueFromPin+0x80>
     792:	04 97       	sbiw	r24, 0x04	; 4
     794:	a1 f1       	breq	.+104    	; 0x7fe <mDIO_ReadValueFromPin+0xa2>
		case GroupA:InputValue=GetBit(PINA_Reg ,PinNumber);break;
		case GroupB:InputValue=GetBit(PINB_Reg,PinNumber);break;
		case GroupC:InputValue=GetBit(PINC_Reg,PinNumber);break;
		case GroupD:InputValue=GetBit(PIND_Reg,PinNumber);break;
		default :  // GroupName Outof Rang
			break;
     796:	45 c0       	rjmp	.+138    	; 0x822 <mDIO_ReadValueFromPin+0xc6>
	uint8_t InputValue ;
	if(PinNumber>= Pin0 && PinNumber <=Pin7)
	{
		switch(GroupName)
		{
		case GroupA:InputValue=GetBit(PINA_Reg ,PinNumber);break;
     798:	89 e3       	ldi	r24, 0x39	; 57
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	2b 81       	ldd	r18, Y+3	; 0x03
     7a6:	22 2f       	mov	r18, r18
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <mDIO_ReadValueFromPin+0x54>
     7ac:	95 95       	asr	r25
     7ae:	87 95       	ror	r24
     7b0:	2a 95       	dec	r18
     7b2:	e2 f7       	brpl	.-8      	; 0x7ac <mDIO_ReadValueFromPin+0x50>
     7b4:	81 70       	andi	r24, 0x01	; 1
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	34 c0       	rjmp	.+104    	; 0x822 <mDIO_ReadValueFromPin+0xc6>
		case GroupB:InputValue=GetBit(PINB_Reg,PinNumber);break;
     7ba:	86 e3       	ldi	r24, 0x36	; 54
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	fc 01       	movw	r30, r24
     7c0:	80 81       	ld	r24, Z
     7c2:	88 2f       	mov	r24, r24
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	2b 81       	ldd	r18, Y+3	; 0x03
     7c8:	22 2f       	mov	r18, r18
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <mDIO_ReadValueFromPin+0x76>
     7ce:	95 95       	asr	r25
     7d0:	87 95       	ror	r24
     7d2:	2a 95       	dec	r18
     7d4:	e2 f7       	brpl	.-8      	; 0x7ce <mDIO_ReadValueFromPin+0x72>
     7d6:	81 70       	andi	r24, 0x01	; 1
     7d8:	89 83       	std	Y+1, r24	; 0x01
     7da:	23 c0       	rjmp	.+70     	; 0x822 <mDIO_ReadValueFromPin+0xc6>
		case GroupC:InputValue=GetBit(PINC_Reg,PinNumber);break;
     7dc:	83 e3       	ldi	r24, 0x33	; 51
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	fc 01       	movw	r30, r24
     7e2:	80 81       	ld	r24, Z
     7e4:	88 2f       	mov	r24, r24
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	2b 81       	ldd	r18, Y+3	; 0x03
     7ea:	22 2f       	mov	r18, r18
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <mDIO_ReadValueFromPin+0x98>
     7f0:	95 95       	asr	r25
     7f2:	87 95       	ror	r24
     7f4:	2a 95       	dec	r18
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <mDIO_ReadValueFromPin+0x94>
     7f8:	81 70       	andi	r24, 0x01	; 1
     7fa:	89 83       	std	Y+1, r24	; 0x01
     7fc:	12 c0       	rjmp	.+36     	; 0x822 <mDIO_ReadValueFromPin+0xc6>
		case GroupD:InputValue=GetBit(PIND_Reg,PinNumber);break;
     7fe:	80 e3       	ldi	r24, 0x30	; 48
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	fc 01       	movw	r30, r24
     804:	80 81       	ld	r24, Z
     806:	88 2f       	mov	r24, r24
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	2b 81       	ldd	r18, Y+3	; 0x03
     80c:	22 2f       	mov	r18, r18
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	02 c0       	rjmp	.+4      	; 0x816 <mDIO_ReadValueFromPin+0xba>
     812:	95 95       	asr	r25
     814:	87 95       	ror	r24
     816:	2a 95       	dec	r18
     818:	e2 f7       	brpl	.-8      	; 0x812 <mDIO_ReadValueFromPin+0xb6>
     81a:	81 70       	andi	r24, 0x01	; 1
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	01 c0       	rjmp	.+2      	; 0x822 <mDIO_ReadValueFromPin+0xc6>
		default :  // GroupName Outof Rang
			break;
		}
	}
     820:	00 00       	nop
	return  InputValue;
     822:	89 81       	ldd	r24, Y+1	; 0x01
}
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	08 95       	ret

00000830 <mDIO_ChangeDirectionforGroup>:



void mDIO_ChangeDirectionforGroup(uint8_t GroupName , uint8_t DirecationValue)
{
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	00 d0       	rcall	.+0      	; 0x836 <mDIO_ChangeDirectionforGroup+0x6>
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	6a 83       	std	Y+2, r22	; 0x02
	//Task 4 // DDR
	if(DirecationValue>=0x00 && DirecationValue<=0xFF)
	{
		switch(GroupName)
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	88 2f       	mov	r24, r24
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	82 30       	cpi	r24, 0x02	; 2
     846:	91 05       	cpc	r25, r1
     848:	91 f0       	breq	.+36     	; 0x86e <mDIO_ChangeDirectionforGroup+0x3e>
     84a:	83 30       	cpi	r24, 0x03	; 3
     84c:	91 05       	cpc	r25, r1
     84e:	1c f4       	brge	.+6      	; 0x856 <mDIO_ChangeDirectionforGroup+0x26>
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	39 f0       	breq	.+14     	; 0x862 <mDIO_ChangeDirectionforGroup+0x32>
		case GroupA: DDRA_Reg=DirecationValue;break;
		case GroupB: DDRB_Reg=DirecationValue;break;
		case GroupC: DDRC_Reg=DirecationValue;break;
		case GroupD: DDRD_Reg=DirecationValue;break;
		default: // GroupName Not Vaild
			break ;
     854:	1e c0       	rjmp	.+60     	; 0x892 <mDIO_ChangeDirectionforGroup+0x62>
void mDIO_ChangeDirectionforGroup(uint8_t GroupName , uint8_t DirecationValue)
{
	//Task 4 // DDR
	if(DirecationValue>=0x00 && DirecationValue<=0xFF)
	{
		switch(GroupName)
     856:	83 30       	cpi	r24, 0x03	; 3
     858:	91 05       	cpc	r25, r1
     85a:	79 f0       	breq	.+30     	; 0x87a <mDIO_ChangeDirectionforGroup+0x4a>
     85c:	04 97       	sbiw	r24, 0x04	; 4
     85e:	99 f0       	breq	.+38     	; 0x886 <mDIO_ChangeDirectionforGroup+0x56>
		case GroupA: DDRA_Reg=DirecationValue;break;
		case GroupB: DDRB_Reg=DirecationValue;break;
		case GroupC: DDRC_Reg=DirecationValue;break;
		case GroupD: DDRD_Reg=DirecationValue;break;
		default: // GroupName Not Vaild
			break ;
     860:	18 c0       	rjmp	.+48     	; 0x892 <mDIO_ChangeDirectionforGroup+0x62>
	//Task 4 // DDR
	if(DirecationValue>=0x00 && DirecationValue<=0xFF)
	{
		switch(GroupName)
		{
		case GroupA: DDRA_Reg=DirecationValue;break;
     862:	8a e3       	ldi	r24, 0x3A	; 58
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	2a 81       	ldd	r18, Y+2	; 0x02
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
     86c:	12 c0       	rjmp	.+36     	; 0x892 <mDIO_ChangeDirectionforGroup+0x62>
		case GroupB: DDRB_Reg=DirecationValue;break;
     86e:	87 e3       	ldi	r24, 0x37	; 55
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	2a 81       	ldd	r18, Y+2	; 0x02
     874:	fc 01       	movw	r30, r24
     876:	20 83       	st	Z, r18
     878:	0c c0       	rjmp	.+24     	; 0x892 <mDIO_ChangeDirectionforGroup+0x62>
		case GroupC: DDRC_Reg=DirecationValue;break;
     87a:	84 e3       	ldi	r24, 0x34	; 52
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	2a 81       	ldd	r18, Y+2	; 0x02
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
     884:	06 c0       	rjmp	.+12     	; 0x892 <mDIO_ChangeDirectionforGroup+0x62>
		case GroupD: DDRD_Reg=DirecationValue;break;
     886:	81 e3       	ldi	r24, 0x31	; 49
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	2a 81       	ldd	r18, Y+2	; 0x02
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
     890:	00 00       	nop
	{
		// Output value out of Range
	}


}
     892:	00 00       	nop
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <mDIO_WriteValueForGroup>:
void mDIO_WriteValueForGroup(uint8_t GroupName ,  uint8_t OutputValue)
{
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <mDIO_WriteValueForGroup+0x6>
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	6a 83       	std	Y+2, r22	; 0x02
	if(OutputValue>=0x00 && OutputValue<=0xFF)
	{
		switch(GroupName)
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	88 2f       	mov	r24, r24
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	82 30       	cpi	r24, 0x02	; 2
     8b4:	91 05       	cpc	r25, r1
     8b6:	91 f0       	breq	.+36     	; 0x8dc <mDIO_WriteValueForGroup+0x3e>
     8b8:	83 30       	cpi	r24, 0x03	; 3
     8ba:	91 05       	cpc	r25, r1
     8bc:	1c f4       	brge	.+6      	; 0x8c4 <mDIO_WriteValueForGroup+0x26>
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	39 f0       	breq	.+14     	; 0x8d0 <mDIO_WriteValueForGroup+0x32>
		case GroupA: PORTA_Reg=OutputValue;break;
		case GroupB: PORTB_Reg=OutputValue;break;
		case GroupC: PORTC_Reg=OutputValue;break;
		case GroupD: PORTD_Reg=OutputValue;break;
		default: // GroupName Not Vaild
			break ;
     8c2:	1e c0       	rjmp	.+60     	; 0x900 <mDIO_WriteValueForGroup+0x62>
}
void mDIO_WriteValueForGroup(uint8_t GroupName ,  uint8_t OutputValue)
{
	if(OutputValue>=0x00 && OutputValue<=0xFF)
	{
		switch(GroupName)
     8c4:	83 30       	cpi	r24, 0x03	; 3
     8c6:	91 05       	cpc	r25, r1
     8c8:	79 f0       	breq	.+30     	; 0x8e8 <mDIO_WriteValueForGroup+0x4a>
     8ca:	04 97       	sbiw	r24, 0x04	; 4
     8cc:	99 f0       	breq	.+38     	; 0x8f4 <mDIO_WriteValueForGroup+0x56>
		case GroupA: PORTA_Reg=OutputValue;break;
		case GroupB: PORTB_Reg=OutputValue;break;
		case GroupC: PORTC_Reg=OutputValue;break;
		case GroupD: PORTD_Reg=OutputValue;break;
		default: // GroupName Not Vaild
			break ;
     8ce:	18 c0       	rjmp	.+48     	; 0x900 <mDIO_WriteValueForGroup+0x62>
{
	if(OutputValue>=0x00 && OutputValue<=0xFF)
	{
		switch(GroupName)
		{
		case GroupA: PORTA_Reg=OutputValue;break;
     8d0:	8b e3       	ldi	r24, 0x3B	; 59
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	2a 81       	ldd	r18, Y+2	; 0x02
     8d6:	fc 01       	movw	r30, r24
     8d8:	20 83       	st	Z, r18
     8da:	12 c0       	rjmp	.+36     	; 0x900 <mDIO_WriteValueForGroup+0x62>
		case GroupB: PORTB_Reg=OutputValue;break;
     8dc:	88 e3       	ldi	r24, 0x38	; 56
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	2a 81       	ldd	r18, Y+2	; 0x02
     8e2:	fc 01       	movw	r30, r24
     8e4:	20 83       	st	Z, r18
     8e6:	0c c0       	rjmp	.+24     	; 0x900 <mDIO_WriteValueForGroup+0x62>
		case GroupC: PORTC_Reg=OutputValue;break;
     8e8:	85 e3       	ldi	r24, 0x35	; 53
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	2a 81       	ldd	r18, Y+2	; 0x02
     8ee:	fc 01       	movw	r30, r24
     8f0:	20 83       	st	Z, r18
     8f2:	06 c0       	rjmp	.+12     	; 0x900 <mDIO_WriteValueForGroup+0x62>
		case GroupD: PORTD_Reg=OutputValue;break;
     8f4:	82 e3       	ldi	r24, 0x32	; 50
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	2a 81       	ldd	r18, Y+2	; 0x02
     8fa:	fc 01       	movw	r30, r24
     8fc:	20 83       	st	Z, r18
     8fe:	00 00       	nop
	else
	{
		// Output value out of Range
	}

}
     900:	00 00       	nop
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <mDIO_ReadValueFromGroup>:
uint8_t mDIO_ReadValueFromGroup(uint8_t  GroupName)
{
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	00 d0       	rcall	.+0      	; 0x912 <mDIO_ReadValueFromGroup+0x6>
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	8a 83       	std	Y+2, r24	; 0x02
	// Task 5
	// Task3
	uint8_t InputValue ;
	switch(GroupName)
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	88 2f       	mov	r24, r24
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	91 05       	cpc	r25, r1
     922:	91 f0       	breq	.+36     	; 0x948 <mDIO_ReadValueFromGroup+0x3c>
     924:	83 30       	cpi	r24, 0x03	; 3
     926:	91 05       	cpc	r25, r1
     928:	1c f4       	brge	.+6      	; 0x930 <mDIO_ReadValueFromGroup+0x24>
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	39 f0       	breq	.+14     	; 0x93c <mDIO_ReadValueFromGroup+0x30>
	case GroupA:InputValue=PINA_Reg;break;
	case GroupB:InputValue=PINB_Reg;break;
	case GroupC:InputValue=PINC_Reg;break;
	case GroupD:InputValue=PIND_Reg;break;
	default :  // GroupName Outof Rang
		break;
     92e:	1e c0       	rjmp	.+60     	; 0x96c <mDIO_ReadValueFromGroup+0x60>
uint8_t mDIO_ReadValueFromGroup(uint8_t  GroupName)
{
	// Task 5
	// Task3
	uint8_t InputValue ;
	switch(GroupName)
     930:	83 30       	cpi	r24, 0x03	; 3
     932:	91 05       	cpc	r25, r1
     934:	79 f0       	breq	.+30     	; 0x954 <mDIO_ReadValueFromGroup+0x48>
     936:	04 97       	sbiw	r24, 0x04	; 4
     938:	99 f0       	breq	.+38     	; 0x960 <mDIO_ReadValueFromGroup+0x54>
	case GroupA:InputValue=PINA_Reg;break;
	case GroupB:InputValue=PINB_Reg;break;
	case GroupC:InputValue=PINC_Reg;break;
	case GroupD:InputValue=PIND_Reg;break;
	default :  // GroupName Outof Rang
		break;
     93a:	18 c0       	rjmp	.+48     	; 0x96c <mDIO_ReadValueFromGroup+0x60>
	// Task 5
	// Task3
	uint8_t InputValue ;
	switch(GroupName)
	{
	case GroupA:InputValue=PINA_Reg;break;
     93c:	89 e3       	ldi	r24, 0x39	; 57
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	89 83       	std	Y+1, r24	; 0x01
     946:	12 c0       	rjmp	.+36     	; 0x96c <mDIO_ReadValueFromGroup+0x60>
	case GroupB:InputValue=PINB_Reg;break;
     948:	86 e3       	ldi	r24, 0x36	; 54
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	fc 01       	movw	r30, r24
     94e:	80 81       	ld	r24, Z
     950:	89 83       	std	Y+1, r24	; 0x01
     952:	0c c0       	rjmp	.+24     	; 0x96c <mDIO_ReadValueFromGroup+0x60>
	case GroupC:InputValue=PINC_Reg;break;
     954:	83 e3       	ldi	r24, 0x33	; 51
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	fc 01       	movw	r30, r24
     95a:	80 81       	ld	r24, Z
     95c:	89 83       	std	Y+1, r24	; 0x01
     95e:	06 c0       	rjmp	.+12     	; 0x96c <mDIO_ReadValueFromGroup+0x60>
	case GroupD:InputValue=PIND_Reg;break;
     960:	80 e3       	ldi	r24, 0x30	; 48
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	fc 01       	movw	r30, r24
     966:	80 81       	ld	r24, Z
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	00 00       	nop
	default :  // GroupName Outof Rang
		break;
	}
	return InputValue;
     96c:	89 81       	ldd	r24, Y+1	; 0x01

}
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <mADC_Init>:
 *4- Right Adjust
 *4- Seclect Prescaller / 8
 *5- Enable ADC
 *-  */
void mADC_Init()
{
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
	/* No Interrupt
		1- ADIE in ADCSRA  Must be Zero
	*/
	ClearBit(ADCSRA_Reg,ADIE_Bit);
     980:	86 e2       	ldi	r24, 0x26	; 38
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	fc 01       	movw	r30, r24
     986:	20 81       	ld	r18, Z
     988:	86 e2       	ldi	r24, 0x26	; 38
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	27 7f       	andi	r18, 0xF7	; 247
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18
	/*
	 * Single Mode Conversion
	 * 1- ADATE in ADCSRA Must be Zero */
	ClearBit(ADCSRA_Reg,ADATE_Bit);
     992:	86 e2       	ldi	r24, 0x26	; 38
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	fc 01       	movw	r30, r24
     998:	20 81       	ld	r18, Z
     99a:	86 e2       	ldi	r24, 0x26	; 38
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	2f 7d       	andi	r18, 0xDF	; 223
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 83       	st	Z, r18
	/*
	 * Aref == AVCC
	 * 1- REFS1 in ADMUX Must be 0
	 * 2- REFS0 in ADMUX Must be 1
	 * */
	ClearBit(ADMUX_Reg,REFS1_Bit);
     9a4:	87 e2       	ldi	r24, 0x27	; 39
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 81       	ld	r18, Z
     9ac:	87 e2       	ldi	r24, 0x27	; 39
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	2f 77       	andi	r18, 0x7F	; 127
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18
	SetBit(ADMUX_Reg,REFS0_Bit);
     9b6:	87 e2       	ldi	r24, 0x27	; 39
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 81       	ld	r18, Z
     9be:	87 e2       	ldi	r24, 0x27	; 39
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	20 64       	ori	r18, 0x40	; 64
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18
	/*
	 *Right Adjust
	 *ADLAR in ADMUX Must be 0  */
	ClearBit(ADMUX_Reg,ADLAR_Bit);
     9c8:	87 e2       	ldi	r24, 0x27	; 39
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	fc 01       	movw	r30, r24
     9ce:	20 81       	ld	r18, Z
     9d0:	87 e2       	ldi	r24, 0x27	; 39
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	2f 7d       	andi	r18, 0xDF	; 223
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
	/*Prescaller =  8
	 * 1- ADPS0 in ADCSRA Must be  1
	 * 2- ADPS1 in ADCSRA Must be  1
	 * 1- ADPS2 in ADCSRA Must be  0
	 * */
	SetBit(ADCSRA_Reg,ADPS0_Bit);
     9da:	86 e2       	ldi	r24, 0x26	; 38
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	fc 01       	movw	r30, r24
     9e0:	20 81       	ld	r18, Z
     9e2:	86 e2       	ldi	r24, 0x26	; 38
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	21 60       	ori	r18, 0x01	; 1
     9e8:	fc 01       	movw	r30, r24
     9ea:	20 83       	st	Z, r18
	SetBit(ADCSRA_Reg,ADPS1_Bit);
     9ec:	86 e2       	ldi	r24, 0x26	; 38
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	fc 01       	movw	r30, r24
     9f2:	20 81       	ld	r18, Z
     9f4:	86 e2       	ldi	r24, 0x26	; 38
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	22 60       	ori	r18, 0x02	; 2
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18
	ClearBit(ADCSRA_Reg,ADPS2_Bit);
     9fe:	86 e2       	ldi	r24, 0x26	; 38
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	fc 01       	movw	r30, r24
     a04:	20 81       	ld	r18, Z
     a06:	86 e2       	ldi	r24, 0x26	; 38
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	2b 7f       	andi	r18, 0xFB	; 251
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 83       	st	Z, r18
	/*
	 * ADC Enbale
	 * 1- ADEN in ADCSRA Must be 1 */
	SetBit(ADCSRA_Reg,ADEN_Bit);
     a10:	86 e2       	ldi	r24, 0x26	; 38
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	fc 01       	movw	r30, r24
     a16:	20 81       	ld	r18, Z
     a18:	86 e2       	ldi	r24, 0x26	; 38
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	20 68       	ori	r18, 0x80	; 128
     a1e:	fc 01       	movw	r30, r24
     a20:	20 83       	st	Z, r18
}
     a22:	00 00       	nop
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <mADC_SignleEndedConversion>:

//mADC_SignleEndedConversion(5);
//mADC_SignleEndedConversion(7);

uint16_t mADC_SignleEndedConversion(uint8_t Channel)// 0 - 7 (00000111)
{
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	1f 92       	push	r1
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	89 83       	std	Y+1, r24	; 0x01
	 * |      0 0 0 C4 C3 C2 C1 C0  ->
	 *
	 * */
	/*Channel */
//	Channel   = Channel & (0b00000111);
	Channel   = Channel & (0x07);
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	87 70       	andi	r24, 0x07	; 7
     a3a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_Reg = ADMUX_Reg| Channel ;
     a3c:	87 e2       	ldi	r24, 0x27	; 39
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	fc 01       	movw	r30, r24
     a42:	30 81       	ld	r19, Z
     a44:	87 e2       	ldi	r24, 0x27	; 39
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	29 81       	ldd	r18, Y+1	; 0x01
     a4a:	23 2b       	or	r18, r19
     a4c:	fc 01       	movw	r30, r24
     a4e:	20 83       	st	Z, r18
	 * Ch|ADMUX ->  101 0 0111
	 *
	 * */
	/*Start Conversion
	 * 1- ADSC in ADCSRA must be 1 */
	SetBit(ADCSRA_Reg,ADSC_Bit);
     a50:	86 e2       	ldi	r24, 0x26	; 38
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	fc 01       	movw	r30, r24
     a56:	20 81       	ld	r18, Z
     a58:	86 e2       	ldi	r24, 0x26	; 38
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	20 64       	ori	r18, 0x40	; 64
     a5e:	fc 01       	movw	r30, r24
     a60:	20 83       	st	Z, r18
	while(GetBit(ADCSRA_Reg,ADIF_Bit)==0)
     a62:	00 00       	nop
     a64:	86 e2       	ldi	r24, 0x26	; 38
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	fc 01       	movw	r30, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	82 95       	swap	r24
     a6e:	8f 70       	andi	r24, 0x0F	; 15
     a70:	88 2f       	mov	r24, r24
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	81 70       	andi	r24, 0x01	; 1
     a76:	99 27       	eor	r25, r25
     a78:	89 2b       	or	r24, r25
     a7a:	a1 f3       	breq	.-24     	; 0xa64 <mADC_SignleEndedConversion+0x3a>
		// Waiting
		// this loop will terminated when the ADIF = 1
	}
	// Clear ADIF By SW
		// Write Logic 1 on ADIF
	SetBit(ADCSRA_Reg,ADIF_Bit);
     a7c:	86 e2       	ldi	r24, 0x26	; 38
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	fc 01       	movw	r30, r24
     a82:	20 81       	ld	r18, Z
     a84:	86 e2       	ldi	r24, 0x26	; 38
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	20 61       	ori	r18, 0x10	; 16
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
	return ADCData_Reg;
     a8e:	84 e2       	ldi	r24, 0x24	; 36
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	80 81       	ld	r24, Z
     a96:	91 81       	ldd	r25, Z+1	; 0x01

}
     a98:	0f 90       	pop	r0
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	08 95       	ret

00000aa0 <hLCD_Init>:

#include "../../../../Timers/Inc/Common/BitMath.h"
#include "../../../../Timers/Inc/HAL/LCD/LCD_Interface.h"
#include "../../../../Timers/Inc/MCAL/DIO/DIO_Interface.h"
void hLCD_Init()
{
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	c6 54       	subi	r28, 0x46	; 70
     aae:	d1 09       	sbc	r29, r1
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	cd bf       	out	0x3d, r28	; 61
	// Set Dirtection
	mDIO_ChangeDirectionForPin(LCD_RSGroup,LCD_RSPin,DIO_Output);
     aba:	41 e0       	ldi	r20, 0x01	; 1
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	0e 94 c2 01 	call	0x384	; 0x384 <mDIO_ChangeDirectionForPin>
	mDIO_ChangeDirectionForPin(LCD_RWGroup,LCD_RWPin,DIO_Output);
     ac4:	41 e0       	ldi	r20, 0x01	; 1
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	84 e0       	ldi	r24, 0x04	; 4
     aca:	0e 94 c2 01 	call	0x384	; 0x384 <mDIO_ChangeDirectionForPin>
	mDIO_ChangeDirectionForPin(LCD_EGroup,LCD_EPin,DIO_Output);
     ace:	41 e0       	ldi	r20, 0x01	; 1
     ad0:	62 e0       	ldi	r22, 0x02	; 2
     ad2:	84 e0       	ldi	r24, 0x04	; 4
     ad4:	0e 94 c2 01 	call	0x384	; 0x384 <mDIO_ChangeDirectionForPin>
	//	mDIO_ChangeDirectionforGroup(LCD_DataGroup,DIO_Output); 0000 0001
	mDIO_ChangeDirectionforGroup(LCD_DataGroup,0xFF);
     ad8:	6f ef       	ldi	r22, 0xFF	; 255
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	0e 94 18 04 	call	0x830	; 0x830 <mDIO_ChangeDirectionforGroup>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	ac e0       	ldi	r26, 0x0C	; 12
     ae6:	b2 e4       	ldi	r27, 0x42	; 66
     ae8:	89 af       	std	Y+57, r24	; 0x39
     aea:	9a af       	std	Y+58, r25	; 0x3a
     aec:	ab af       	std	Y+59, r26	; 0x3b
     aee:	bc af       	std	Y+60, r27	; 0x3c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	4a e7       	ldi	r20, 0x7A	; 122
     af6:	53 e4       	ldi	r21, 0x43	; 67
     af8:	69 ad       	ldd	r22, Y+57	; 0x39
     afa:	7a ad       	ldd	r23, Y+58	; 0x3a
     afc:	8b ad       	ldd	r24, Y+59	; 0x3b
     afe:	9c ad       	ldd	r25, Y+60	; 0x3c
     b00:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	9e 01       	movw	r18, r28
     b0a:	23 5c       	subi	r18, 0xC3	; 195
     b0c:	3f 4f       	sbci	r19, 0xFF	; 255
     b0e:	f9 01       	movw	r30, r18
     b10:	80 83       	st	Z, r24
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	a2 83       	std	Z+2, r26	; 0x02
     b16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e8       	ldi	r20, 0x80	; 128
     b1e:	5f e3       	ldi	r21, 0x3F	; 63
     b20:	ce 01       	movw	r24, r28
     b22:	cd 96       	adiw	r24, 0x3d	; 61
     b24:	fc 01       	movw	r30, r24
     b26:	60 81       	ld	r22, Z
     b28:	71 81       	ldd	r23, Z+1	; 0x01
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	93 81       	ldd	r25, Z+3	; 0x03
     b2e:	0e 94 66 09 	call	0x12cc	; 0x12cc <__cmpsf2>
     b32:	88 23       	and	r24, r24
     b34:	4c f4       	brge	.+18     	; 0xb48 <hLCD_Init+0xa8>
		__ticks = 1;
     b36:	ce 01       	movw	r24, r28
     b38:	8f 5b       	subi	r24, 0xBF	; 191
     b3a:	9f 4f       	sbci	r25, 0xFF	; 255
     b3c:	21 e0       	ldi	r18, 0x01	; 1
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	fc 01       	movw	r30, r24
     b42:	31 83       	std	Z+1, r19	; 0x01
     b44:	20 83       	st	Z, r18
     b46:	67 c0       	rjmp	.+206    	; 0xc16 <hLCD_Init+0x176>
	else if (__tmp > 65535)
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	3f ef       	ldi	r19, 0xFF	; 255
     b4c:	4f e7       	ldi	r20, 0x7F	; 127
     b4e:	57 e4       	ldi	r21, 0x47	; 71
     b50:	ce 01       	movw	r24, r28
     b52:	cd 96       	adiw	r24, 0x3d	; 61
     b54:	fc 01       	movw	r30, r24
     b56:	60 81       	ld	r22, Z
     b58:	71 81       	ldd	r23, Z+1	; 0x01
     b5a:	82 81       	ldd	r24, Z+2	; 0x02
     b5c:	93 81       	ldd	r25, Z+3	; 0x03
     b5e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
     b62:	18 16       	cp	r1, r24
     b64:	0c f0       	brlt	.+2      	; 0xb68 <hLCD_Init+0xc8>
     b66:	46 c0       	rjmp	.+140    	; 0xbf4 <hLCD_Init+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e2       	ldi	r20, 0x20	; 32
     b6e:	51 e4       	ldi	r21, 0x41	; 65
     b70:	69 ad       	ldd	r22, Y+57	; 0x39
     b72:	7a ad       	ldd	r23, Y+58	; 0x3a
     b74:	8b ad       	ldd	r24, Y+59	; 0x3b
     b76:	9c ad       	ldd	r25, Y+60	; 0x3c
     b78:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     b7c:	dc 01       	movw	r26, r24
     b7e:	cb 01       	movw	r24, r22
     b80:	8e 01       	movw	r16, r28
     b82:	0f 5b       	subi	r16, 0xBF	; 191
     b84:	1f 4f       	sbci	r17, 0xFF	; 255
     b86:	bc 01       	movw	r22, r24
     b88:	cd 01       	movw	r24, r26
     b8a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfsi>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	f8 01       	movw	r30, r16
     b94:	91 83       	std	Z+1, r25	; 0x01
     b96:	80 83       	st	Z, r24
     b98:	24 c0       	rjmp	.+72     	; 0xbe2 <hLCD_Init+0x142>
     b9a:	ce 01       	movw	r24, r28
     b9c:	8d 5b       	subi	r24, 0xBD	; 189
     b9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ba0:	29 e1       	ldi	r18, 0x19	; 25
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	fc 01       	movw	r30, r24
     ba6:	31 83       	std	Z+1, r19	; 0x01
     ba8:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     baa:	ce 01       	movw	r24, r28
     bac:	8d 5b       	subi	r24, 0xBD	; 189
     bae:	9f 4f       	sbci	r25, 0xFF	; 255
     bb0:	fc 01       	movw	r30, r24
     bb2:	80 81       	ld	r24, Z
     bb4:	91 81       	ldd	r25, Z+1	; 0x01
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <hLCD_Init+0x116>
     bba:	9e 01       	movw	r18, r28
     bbc:	2d 5b       	subi	r18, 0xBD	; 189
     bbe:	3f 4f       	sbci	r19, 0xFF	; 255
     bc0:	f9 01       	movw	r30, r18
     bc2:	91 83       	std	Z+1, r25	; 0x01
     bc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bc6:	ce 01       	movw	r24, r28
     bc8:	8f 5b       	subi	r24, 0xBF	; 191
     bca:	9f 4f       	sbci	r25, 0xFF	; 255
     bcc:	9e 01       	movw	r18, r28
     bce:	2f 5b       	subi	r18, 0xBF	; 191
     bd0:	3f 4f       	sbci	r19, 0xFF	; 255
     bd2:	f9 01       	movw	r30, r18
     bd4:	20 81       	ld	r18, Z
     bd6:	31 81       	ldd	r19, Z+1	; 0x01
     bd8:	21 50       	subi	r18, 0x01	; 1
     bda:	31 09       	sbc	r19, r1
     bdc:	fc 01       	movw	r30, r24
     bde:	31 83       	std	Z+1, r19	; 0x01
     be0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     be2:	ce 01       	movw	r24, r28
     be4:	8f 5b       	subi	r24, 0xBF	; 191
     be6:	9f 4f       	sbci	r25, 0xFF	; 255
     be8:	fc 01       	movw	r30, r24
     bea:	80 81       	ld	r24, Z
     bec:	91 81       	ldd	r25, Z+1	; 0x01
     bee:	89 2b       	or	r24, r25
     bf0:	a1 f6       	brne	.-88     	; 0xb9a <hLCD_Init+0xfa>
     bf2:	2b c0       	rjmp	.+86     	; 0xc4a <hLCD_Init+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf4:	8e 01       	movw	r16, r28
     bf6:	0f 5b       	subi	r16, 0xBF	; 191
     bf8:	1f 4f       	sbci	r17, 0xFF	; 255
     bfa:	ce 01       	movw	r24, r28
     bfc:	cd 96       	adiw	r24, 0x3d	; 61
     bfe:	fc 01       	movw	r30, r24
     c00:	60 81       	ld	r22, Z
     c02:	71 81       	ldd	r23, Z+1	; 0x01
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	f8 01       	movw	r30, r16
     c12:	91 83       	std	Z+1, r25	; 0x01
     c14:	80 83       	st	Z, r24
     c16:	ce 01       	movw	r24, r28
     c18:	8b 5b       	subi	r24, 0xBB	; 187
     c1a:	9f 4f       	sbci	r25, 0xFF	; 255
     c1c:	9e 01       	movw	r18, r28
     c1e:	2f 5b       	subi	r18, 0xBF	; 191
     c20:	3f 4f       	sbci	r19, 0xFF	; 255
     c22:	f9 01       	movw	r30, r18
     c24:	20 81       	ld	r18, Z
     c26:	31 81       	ldd	r19, Z+1	; 0x01
     c28:	fc 01       	movw	r30, r24
     c2a:	31 83       	std	Z+1, r19	; 0x01
     c2c:	20 83       	st	Z, r18
     c2e:	ce 01       	movw	r24, r28
     c30:	8b 5b       	subi	r24, 0xBB	; 187
     c32:	9f 4f       	sbci	r25, 0xFF	; 255
     c34:	fc 01       	movw	r30, r24
     c36:	80 81       	ld	r24, Z
     c38:	91 81       	ldd	r25, Z+1	; 0x01
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <hLCD_Init+0x19a>
     c3e:	9e 01       	movw	r18, r28
     c40:	2b 5b       	subi	r18, 0xBB	; 187
     c42:	3f 4f       	sbci	r19, 0xFF	; 255
     c44:	f9 01       	movw	r30, r18
     c46:	91 83       	std	Z+1, r25	; 0x01
     c48:	80 83       	st	Z, r24

	/*Initaliaztion 8Bit Mode */
	//Delay More Than 30ms
	_delay_ms(35);
	// Function Set
	hLCD_SendCommand(0x38);
     c4a:	88 e3       	ldi	r24, 0x38	; 56
     c4c:	0e 94 06 08 	call	0x100c	; 0x100c <hLCD_SendCommand>
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e8       	ldi	r26, 0x80	; 128
     c56:	bf e3       	ldi	r27, 0x3F	; 63
     c58:	8b a7       	std	Y+43, r24	; 0x2b
     c5a:	9c a7       	std	Y+44, r25	; 0x2c
     c5c:	ad a7       	std	Y+45, r26	; 0x2d
     c5e:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	4a e7       	ldi	r20, 0x7A	; 122
     c66:	53 e4       	ldi	r21, 0x43	; 67
     c68:	6b a5       	ldd	r22, Y+43	; 0x2b
     c6a:	7c a5       	ldd	r23, Y+44	; 0x2c
     c6c:	8d a5       	ldd	r24, Y+45	; 0x2d
     c6e:	9e a5       	ldd	r25, Y+46	; 0x2e
     c70:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	8f a7       	std	Y+47, r24	; 0x2f
     c7a:	98 ab       	std	Y+48, r25	; 0x30
     c7c:	a9 ab       	std	Y+49, r26	; 0x31
     c7e:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e8       	ldi	r20, 0x80	; 128
     c86:	5f e3       	ldi	r21, 0x3F	; 63
     c88:	6f a5       	ldd	r22, Y+47	; 0x2f
     c8a:	78 a9       	ldd	r23, Y+48	; 0x30
     c8c:	89 a9       	ldd	r24, Y+49	; 0x31
     c8e:	9a a9       	ldd	r25, Y+50	; 0x32
     c90:	0e 94 66 09 	call	0x12cc	; 0x12cc <__cmpsf2>
     c94:	88 23       	and	r24, r24
     c96:	2c f4       	brge	.+10     	; 0xca2 <hLCD_Init+0x202>
		__ticks = 1;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	9c ab       	std	Y+52, r25	; 0x34
     c9e:	8b ab       	std	Y+51, r24	; 0x33
     ca0:	3f c0       	rjmp	.+126    	; 0xd20 <hLCD_Init+0x280>
	else if (__tmp > 65535)
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	3f ef       	ldi	r19, 0xFF	; 255
     ca6:	4f e7       	ldi	r20, 0x7F	; 127
     ca8:	57 e4       	ldi	r21, 0x47	; 71
     caa:	6f a5       	ldd	r22, Y+47	; 0x2f
     cac:	78 a9       	ldd	r23, Y+48	; 0x30
     cae:	89 a9       	ldd	r24, Y+49	; 0x31
     cb0:	9a a9       	ldd	r25, Y+50	; 0x32
     cb2:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
     cb6:	18 16       	cp	r1, r24
     cb8:	4c f5       	brge	.+82     	; 0xd0c <hLCD_Init+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e2       	ldi	r20, 0x20	; 32
     cc0:	51 e4       	ldi	r21, 0x41	; 65
     cc2:	6b a5       	ldd	r22, Y+43	; 0x2b
     cc4:	7c a5       	ldd	r23, Y+44	; 0x2c
     cc6:	8d a5       	ldd	r24, Y+45	; 0x2d
     cc8:	9e a5       	ldd	r25, Y+46	; 0x2e
     cca:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	bc 01       	movw	r22, r24
     cd4:	cd 01       	movw	r24, r26
     cd6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfsi>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	9c ab       	std	Y+52, r25	; 0x34
     ce0:	8b ab       	std	Y+51, r24	; 0x33
     ce2:	0f c0       	rjmp	.+30     	; 0xd02 <hLCD_Init+0x262>
     ce4:	89 e1       	ldi	r24, 0x19	; 25
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	9e ab       	std	Y+54, r25	; 0x36
     cea:	8d ab       	std	Y+53, r24	; 0x35
     cec:	8d a9       	ldd	r24, Y+53	; 0x35
     cee:	9e a9       	ldd	r25, Y+54	; 0x36
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <hLCD_Init+0x250>
     cf4:	9e ab       	std	Y+54, r25	; 0x36
     cf6:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf8:	8b a9       	ldd	r24, Y+51	; 0x33
     cfa:	9c a9       	ldd	r25, Y+52	; 0x34
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	9c ab       	std	Y+52, r25	; 0x34
     d00:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d02:	8b a9       	ldd	r24, Y+51	; 0x33
     d04:	9c a9       	ldd	r25, Y+52	; 0x34
     d06:	89 2b       	or	r24, r25
     d08:	69 f7       	brne	.-38     	; 0xce4 <hLCD_Init+0x244>
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <hLCD_Init+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0c:	6f a5       	ldd	r22, Y+47	; 0x2f
     d0e:	78 a9       	ldd	r23, Y+48	; 0x30
     d10:	89 a9       	ldd	r24, Y+49	; 0x31
     d12:	9a a9       	ldd	r25, Y+50	; 0x32
     d14:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfsi>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	9c ab       	std	Y+52, r25	; 0x34
     d1e:	8b ab       	std	Y+51, r24	; 0x33
     d20:	8b a9       	ldd	r24, Y+51	; 0x33
     d22:	9c a9       	ldd	r25, Y+52	; 0x34
     d24:	98 af       	std	Y+56, r25	; 0x38
     d26:	8f ab       	std	Y+55, r24	; 0x37
     d28:	8f a9       	ldd	r24, Y+55	; 0x37
     d2a:	98 ad       	ldd	r25, Y+56	; 0x38
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <hLCD_Init+0x28c>
     d30:	98 af       	std	Y+56, r25	; 0x38
     d32:	8f ab       	std	Y+55, r24	; 0x37
	//Delay More than 39us -> 1ms
	_delay_ms(1);
	//Display ON/OFF Control
	hLCD_SendCommand(0x0E);
     d34:	8e e0       	ldi	r24, 0x0E	; 14
     d36:	0e 94 06 08 	call	0x100c	; 0x100c <hLCD_SendCommand>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 e8       	ldi	r26, 0x80	; 128
     d40:	bf e3       	ldi	r27, 0x3F	; 63
     d42:	8d 8f       	std	Y+29, r24	; 0x1d
     d44:	9e 8f       	std	Y+30, r25	; 0x1e
     d46:	af 8f       	std	Y+31, r26	; 0x1f
     d48:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	4a e7       	ldi	r20, 0x7A	; 122
     d50:	53 e4       	ldi	r21, 0x43	; 67
     d52:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d54:	7e 8d       	ldd	r23, Y+30	; 0x1e
     d56:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d58:	98 a1       	ldd	r25, Y+32	; 0x20
     d5a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	89 a3       	std	Y+33, r24	; 0x21
     d64:	9a a3       	std	Y+34, r25	; 0x22
     d66:	ab a3       	std	Y+35, r26	; 0x23
     d68:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	40 e8       	ldi	r20, 0x80	; 128
     d70:	5f e3       	ldi	r21, 0x3F	; 63
     d72:	69 a1       	ldd	r22, Y+33	; 0x21
     d74:	7a a1       	ldd	r23, Y+34	; 0x22
     d76:	8b a1       	ldd	r24, Y+35	; 0x23
     d78:	9c a1       	ldd	r25, Y+36	; 0x24
     d7a:	0e 94 66 09 	call	0x12cc	; 0x12cc <__cmpsf2>
     d7e:	88 23       	and	r24, r24
     d80:	2c f4       	brge	.+10     	; 0xd8c <hLCD_Init+0x2ec>
		__ticks = 1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9e a3       	std	Y+38, r25	; 0x26
     d88:	8d a3       	std	Y+37, r24	; 0x25
     d8a:	3f c0       	rjmp	.+126    	; 0xe0a <hLCD_Init+0x36a>
	else if (__tmp > 65535)
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	3f ef       	ldi	r19, 0xFF	; 255
     d90:	4f e7       	ldi	r20, 0x7F	; 127
     d92:	57 e4       	ldi	r21, 0x47	; 71
     d94:	69 a1       	ldd	r22, Y+33	; 0x21
     d96:	7a a1       	ldd	r23, Y+34	; 0x22
     d98:	8b a1       	ldd	r24, Y+35	; 0x23
     d9a:	9c a1       	ldd	r25, Y+36	; 0x24
     d9c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
     da0:	18 16       	cp	r1, r24
     da2:	4c f5       	brge	.+82     	; 0xdf6 <hLCD_Init+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e2       	ldi	r20, 0x20	; 32
     daa:	51 e4       	ldi	r21, 0x41	; 65
     dac:	6d 8d       	ldd	r22, Y+29	; 0x1d
     dae:	7e 8d       	ldd	r23, Y+30	; 0x1e
     db0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     db2:	98 a1       	ldd	r25, Y+32	; 0x20
     db4:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9e a3       	std	Y+38, r25	; 0x26
     dca:	8d a3       	std	Y+37, r24	; 0x25
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <hLCD_Init+0x34c>
     dce:	89 e1       	ldi	r24, 0x19	; 25
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	98 a7       	std	Y+40, r25	; 0x28
     dd4:	8f a3       	std	Y+39, r24	; 0x27
     dd6:	8f a1       	ldd	r24, Y+39	; 0x27
     dd8:	98 a5       	ldd	r25, Y+40	; 0x28
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <hLCD_Init+0x33a>
     dde:	98 a7       	std	Y+40, r25	; 0x28
     de0:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de2:	8d a1       	ldd	r24, Y+37	; 0x25
     de4:	9e a1       	ldd	r25, Y+38	; 0x26
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	9e a3       	std	Y+38, r25	; 0x26
     dea:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dec:	8d a1       	ldd	r24, Y+37	; 0x25
     dee:	9e a1       	ldd	r25, Y+38	; 0x26
     df0:	89 2b       	or	r24, r25
     df2:	69 f7       	brne	.-38     	; 0xdce <hLCD_Init+0x32e>
     df4:	14 c0       	rjmp	.+40     	; 0xe1e <hLCD_Init+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df6:	69 a1       	ldd	r22, Y+33	; 0x21
     df8:	7a a1       	ldd	r23, Y+34	; 0x22
     dfa:	8b a1       	ldd	r24, Y+35	; 0x23
     dfc:	9c a1       	ldd	r25, Y+36	; 0x24
     dfe:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	9e a3       	std	Y+38, r25	; 0x26
     e08:	8d a3       	std	Y+37, r24	; 0x25
     e0a:	8d a1       	ldd	r24, Y+37	; 0x25
     e0c:	9e a1       	ldd	r25, Y+38	; 0x26
     e0e:	9a a7       	std	Y+42, r25	; 0x2a
     e10:	89 a7       	std	Y+41, r24	; 0x29
     e12:	89 a5       	ldd	r24, Y+41	; 0x29
     e14:	9a a5       	ldd	r25, Y+42	; 0x2a
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <hLCD_Init+0x376>
     e1a:	9a a7       	std	Y+42, r25	; 0x2a
     e1c:	89 a7       	std	Y+41, r24	; 0x29
	//Delay More than 39us -> 1ms
	_delay_ms(1);
	//Display Clear
	hLCD_SendCommand(0x01);
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	0e 94 06 08 	call	0x100c	; 0x100c <hLCD_SendCommand>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	a0 e0       	ldi	r26, 0x00	; 0
     e2a:	b0 e4       	ldi	r27, 0x40	; 64
     e2c:	8f 87       	std	Y+15, r24	; 0x0f
     e2e:	98 8b       	std	Y+16, r25	; 0x10
     e30:	a9 8b       	std	Y+17, r26	; 0x11
     e32:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	4a e7       	ldi	r20, 0x7A	; 122
     e3a:	53 e4       	ldi	r21, 0x43	; 67
     e3c:	6f 85       	ldd	r22, Y+15	; 0x0f
     e3e:	78 89       	ldd	r23, Y+16	; 0x10
     e40:	89 89       	ldd	r24, Y+17	; 0x11
     e42:	9a 89       	ldd	r25, Y+18	; 0x12
     e44:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	8b 8b       	std	Y+19, r24	; 0x13
     e4e:	9c 8b       	std	Y+20, r25	; 0x14
     e50:	ad 8b       	std	Y+21, r26	; 0x15
     e52:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e8       	ldi	r20, 0x80	; 128
     e5a:	5f e3       	ldi	r21, 0x3F	; 63
     e5c:	6b 89       	ldd	r22, Y+19	; 0x13
     e5e:	7c 89       	ldd	r23, Y+20	; 0x14
     e60:	8d 89       	ldd	r24, Y+21	; 0x15
     e62:	9e 89       	ldd	r25, Y+22	; 0x16
     e64:	0e 94 66 09 	call	0x12cc	; 0x12cc <__cmpsf2>
     e68:	88 23       	and	r24, r24
     e6a:	2c f4       	brge	.+10     	; 0xe76 <hLCD_Init+0x3d6>
		__ticks = 1;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	98 8f       	std	Y+24, r25	; 0x18
     e72:	8f 8b       	std	Y+23, r24	; 0x17
     e74:	3f c0       	rjmp	.+126    	; 0xef4 <hLCD_Init+0x454>
	else if (__tmp > 65535)
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	3f ef       	ldi	r19, 0xFF	; 255
     e7a:	4f e7       	ldi	r20, 0x7F	; 127
     e7c:	57 e4       	ldi	r21, 0x47	; 71
     e7e:	6b 89       	ldd	r22, Y+19	; 0x13
     e80:	7c 89       	ldd	r23, Y+20	; 0x14
     e82:	8d 89       	ldd	r24, Y+21	; 0x15
     e84:	9e 89       	ldd	r25, Y+22	; 0x16
     e86:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
     e8a:	18 16       	cp	r1, r24
     e8c:	4c f5       	brge	.+82     	; 0xee0 <hLCD_Init+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e2       	ldi	r20, 0x20	; 32
     e94:	51 e4       	ldi	r21, 0x41	; 65
     e96:	6f 85       	ldd	r22, Y+15	; 0x0f
     e98:	78 89       	ldd	r23, Y+16	; 0x10
     e9a:	89 89       	ldd	r24, Y+17	; 0x11
     e9c:	9a 89       	ldd	r25, Y+18	; 0x12
     e9e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	98 8f       	std	Y+24, r25	; 0x18
     eb4:	8f 8b       	std	Y+23, r24	; 0x17
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <hLCD_Init+0x436>
     eb8:	89 e1       	ldi	r24, 0x19	; 25
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9a 8f       	std	Y+26, r25	; 0x1a
     ebe:	89 8f       	std	Y+25, r24	; 0x19
     ec0:	89 8d       	ldd	r24, Y+25	; 0x19
     ec2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <hLCD_Init+0x424>
     ec8:	9a 8f       	std	Y+26, r25	; 0x1a
     eca:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ecc:	8f 89       	ldd	r24, Y+23	; 0x17
     ece:	98 8d       	ldd	r25, Y+24	; 0x18
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	98 8f       	std	Y+24, r25	; 0x18
     ed4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed6:	8f 89       	ldd	r24, Y+23	; 0x17
     ed8:	98 8d       	ldd	r25, Y+24	; 0x18
     eda:	89 2b       	or	r24, r25
     edc:	69 f7       	brne	.-38     	; 0xeb8 <hLCD_Init+0x418>
     ede:	14 c0       	rjmp	.+40     	; 0xf08 <hLCD_Init+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee0:	6b 89       	ldd	r22, Y+19	; 0x13
     ee2:	7c 89       	ldd	r23, Y+20	; 0x14
     ee4:	8d 89       	ldd	r24, Y+21	; 0x15
     ee6:	9e 89       	ldd	r25, Y+22	; 0x16
     ee8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	98 8f       	std	Y+24, r25	; 0x18
     ef2:	8f 8b       	std	Y+23, r24	; 0x17
     ef4:	8f 89       	ldd	r24, Y+23	; 0x17
     ef6:	98 8d       	ldd	r25, Y+24	; 0x18
     ef8:	9c 8f       	std	Y+28, r25	; 0x1c
     efa:	8b 8f       	std	Y+27, r24	; 0x1b
     efc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     efe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <hLCD_Init+0x460>
     f04:	9c 8f       	std	Y+28, r25	; 0x1c
     f06:	8b 8f       	std	Y+27, r24	; 0x1b
	//Delay More than 1.53ms ->2ms
	_delay_ms(2);
	//	Entry Mode Set
	hLCD_SendCommand(0x06);
     f08:	86 e0       	ldi	r24, 0x06	; 6
     f0a:	0e 94 06 08 	call	0x100c	; 0x100c <hLCD_SendCommand>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	a0 e8       	ldi	r26, 0x80	; 128
     f14:	bf e3       	ldi	r27, 0x3F	; 63
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	ab 83       	std	Y+3, r26	; 0x03
     f1c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	4a e7       	ldi	r20, 0x7A	; 122
     f24:	53 e4       	ldi	r21, 0x43	; 67
     f26:	69 81       	ldd	r22, Y+1	; 0x01
     f28:	7a 81       	ldd	r23, Y+2	; 0x02
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	8d 83       	std	Y+5, r24	; 0x05
     f38:	9e 83       	std	Y+6, r25	; 0x06
     f3a:	af 83       	std	Y+7, r26	; 0x07
     f3c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e8       	ldi	r20, 0x80	; 128
     f44:	5f e3       	ldi	r21, 0x3F	; 63
     f46:	6d 81       	ldd	r22, Y+5	; 0x05
     f48:	7e 81       	ldd	r23, Y+6	; 0x06
     f4a:	8f 81       	ldd	r24, Y+7	; 0x07
     f4c:	98 85       	ldd	r25, Y+8	; 0x08
     f4e:	0e 94 66 09 	call	0x12cc	; 0x12cc <__cmpsf2>
     f52:	88 23       	and	r24, r24
     f54:	2c f4       	brge	.+10     	; 0xf60 <hLCD_Init+0x4c0>
		__ticks = 1;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	9a 87       	std	Y+10, r25	; 0x0a
     f5c:	89 87       	std	Y+9, r24	; 0x09
     f5e:	3f c0       	rjmp	.+126    	; 0xfde <hLCD_Init+0x53e>
	else if (__tmp > 65535)
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	3f ef       	ldi	r19, 0xFF	; 255
     f64:	4f e7       	ldi	r20, 0x7F	; 127
     f66:	57 e4       	ldi	r21, 0x47	; 71
     f68:	6d 81       	ldd	r22, Y+5	; 0x05
     f6a:	7e 81       	ldd	r23, Y+6	; 0x06
     f6c:	8f 81       	ldd	r24, Y+7	; 0x07
     f6e:	98 85       	ldd	r25, Y+8	; 0x08
     f70:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
     f74:	18 16       	cp	r1, r24
     f76:	4c f5       	brge	.+82     	; 0xfca <hLCD_Init+0x52a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e2       	ldi	r20, 0x20	; 32
     f7e:	51 e4       	ldi	r21, 0x41	; 65
     f80:	69 81       	ldd	r22, Y+1	; 0x01
     f82:	7a 81       	ldd	r23, Y+2	; 0x02
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	bc 01       	movw	r22, r24
     f92:	cd 01       	movw	r24, r26
     f94:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfsi>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	9a 87       	std	Y+10, r25	; 0x0a
     f9e:	89 87       	std	Y+9, r24	; 0x09
     fa0:	0f c0       	rjmp	.+30     	; 0xfc0 <hLCD_Init+0x520>
     fa2:	89 e1       	ldi	r24, 0x19	; 25
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	9c 87       	std	Y+12, r25	; 0x0c
     fa8:	8b 87       	std	Y+11, r24	; 0x0b
     faa:	8b 85       	ldd	r24, Y+11	; 0x0b
     fac:	9c 85       	ldd	r25, Y+12	; 0x0c
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <hLCD_Init+0x50e>
     fb2:	9c 87       	std	Y+12, r25	; 0x0c
     fb4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb6:	89 85       	ldd	r24, Y+9	; 0x09
     fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	9a 87       	std	Y+10, r25	; 0x0a
     fbe:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc0:	89 85       	ldd	r24, Y+9	; 0x09
     fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc4:	89 2b       	or	r24, r25
     fc6:	69 f7       	brne	.-38     	; 0xfa2 <hLCD_Init+0x502>
	_delay_ms(1);



}
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <hLCD_Init+0x552>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fca:	6d 81       	ldd	r22, Y+5	; 0x05
     fcc:	7e 81       	ldd	r23, Y+6	; 0x06
     fce:	8f 81       	ldd	r24, Y+7	; 0x07
     fd0:	98 85       	ldd	r25, Y+8	; 0x08
     fd2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	9a 87       	std	Y+10, r25	; 0x0a
     fdc:	89 87       	std	Y+9, r24	; 0x09
     fde:	89 85       	ldd	r24, Y+9	; 0x09
     fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe2:	9e 87       	std	Y+14, r25	; 0x0e
     fe4:	8d 87       	std	Y+13, r24	; 0x0d
     fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <hLCD_Init+0x54a>
     fee:	9e 87       	std	Y+14, r25	; 0x0e
     ff0:	8d 87       	std	Y+13, r24	; 0x0d
     ff2:	00 00       	nop
     ff4:	ca 5b       	subi	r28, 0xBA	; 186
     ff6:	df 4f       	sbci	r29, 0xFF	; 255
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	08 95       	ret

0000100c <hLCD_SendCommand>:
void hLCD_SendCommand(uint8_t Command)
{
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	1f 92       	push	r1
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	89 83       	std	Y+1, r24	; 0x01
	// RS -> 0
	mDIO_WriteValueForPin(LCD_RSGroup,LCD_RSPin,DIO_Low);
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	84 e0       	ldi	r24, 0x04	; 4
    101e:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>
	// RW -> 0
	mDIO_WriteValueForPin(LCD_RWGroup,LCD_RWPin,DIO_Low);
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	84 e0       	ldi	r24, 0x04	; 4
    1028:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>
	// E  -> 1
	mDIO_WriteValueForPin(LCD_EGroup,LCD_EPin,DIO_High);
    102c:	41 e0       	ldi	r20, 0x01	; 1
    102e:	62 e0       	ldi	r22, 0x02	; 2
    1030:	84 e0       	ldi	r24, 0x04	; 4
    1032:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>
	// UpdateCommand
	mDIO_WriteValueForGroup(LCD_DataGroup,Command);
    1036:	69 81       	ldd	r22, Y+1	; 0x01
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	0e 94 4f 04 	call	0x89e	; 0x89e <mDIO_WriteValueForGroup>
	// E  -> 0
	mDIO_WriteValueForPin(LCD_EGroup,LCD_EPin,DIO_Low);
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	62 e0       	ldi	r22, 0x02	; 2
    1042:	84 e0       	ldi	r24, 0x04	; 4
    1044:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>
}
    1048:	00 00       	nop
    104a:	0f 90       	pop	r0
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <hLCD_SendChar>:

void hLCD_SendChar(uint8_t Character)
{
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	1f 92       	push	r1
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	89 83       	std	Y+1, r24	; 0x01
	//	RS ->1
	mDIO_WriteValueForPin(LCD_RSGroup,LCD_RSPin,DIO_High);
    105e:	41 e0       	ldi	r20, 0x01	; 1
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>
	//RW -> 0
	mDIO_WriteValueForPin(LCD_RWGroup,LCD_RWPin,DIO_Low);
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	61 e0       	ldi	r22, 0x01	; 1
    106c:	84 e0       	ldi	r24, 0x04	; 4
    106e:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>
	// E -1
	mDIO_WriteValueForPin(LCD_EGroup,LCD_EPin,DIO_High);
    1072:	41 e0       	ldi	r20, 0x01	; 1
    1074:	62 e0       	ldi	r22, 0x02	; 2
    1076:	84 e0       	ldi	r24, 0x04	; 4
    1078:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>
	//Updata data
	mDIO_WriteValueForGroup(LCD_DataGroup,Character);
    107c:	69 81       	ldd	r22, Y+1	; 0x01
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	0e 94 4f 04 	call	0x89e	; 0x89e <mDIO_WriteValueForGroup>
	//E - 0
	mDIO_WriteValueForPin(LCD_EGroup,LCD_EPin,DIO_Low);
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	62 e0       	ldi	r22, 0x02	; 2
    1088:	84 e0       	ldi	r24, 0x04	; 4
    108a:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>

}
    108e:	00 00       	nop
    1090:	0f 90       	pop	r0
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <hLCD_SendString>:
//		}
//	}
//}

void hLCD_SendString(uint8_t Str[])
{
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	00 d0       	rcall	.+0      	; 0x109e <hLCD_SendString+0x6>
    109e:	1f 92       	push	r1
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	9b 83       	std	Y+3, r25	; 0x03
    10a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Index = 0 ;
    10a8:	19 82       	std	Y+1, r1	; 0x01
	if(Str!=NULL)
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	9b 81       	ldd	r25, Y+3	; 0x03
    10ae:	89 2b       	or	r24, r25
    10b0:	d1 f0       	breq	.+52     	; 0x10e6 <hLCD_SendString+0x4e>
	{
		while(Str[Index]!=NULLChar)
    10b2:	0e c0       	rjmp	.+28     	; 0x10d0 <hLCD_SendString+0x38>
		{
			hLCD_SendChar(Str[Index]);
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	2a 81       	ldd	r18, Y+2	; 0x02
    10bc:	3b 81       	ldd	r19, Y+3	; 0x03
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	fc 01       	movw	r30, r24
    10c4:	80 81       	ld	r24, Z
    10c6:	0e 94 29 08 	call	0x1052	; 0x1052 <hLCD_SendChar>
			Index++;
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	8f 5f       	subi	r24, 0xFF	; 255
    10ce:	89 83       	std	Y+1, r24	; 0x01
void hLCD_SendString(uint8_t Str[])
{
	uint8_t Index = 0 ;
	if(Str!=NULL)
	{
		while(Str[Index]!=NULLChar)
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	2a 81       	ldd	r18, Y+2	; 0x02
    10d8:	3b 81       	ldd	r19, Y+3	; 0x03
    10da:	82 0f       	add	r24, r18
    10dc:	93 1f       	adc	r25, r19
    10de:	fc 01       	movw	r30, r24
    10e0:	80 81       	ld	r24, Z
    10e2:	88 23       	and	r24, r24
    10e4:	39 f7       	brne	.-50     	; 0x10b4 <hLCD_SendString+0x1c>
		{
			hLCD_SendChar(Str[Index]);
			Index++;
		}
	}
}
    10e6:	00 00       	nop
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <hLCD_MoveCursor>:
#define SecondeLineAddress  0x40
#define SetDDRAMCommand     0x80


void hLCD_MoveCursor(uint8_t Line ,uint8_t Digit)
{
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	61 97       	sbiw	r28, 0x11	; 17
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	88 8b       	std	Y+16, r24	; 0x10
    110a:	69 8b       	std	Y+17, r22	; 0x11
	// Need know How Sent to LCD Move in DDRM
	// Line Option
	 // Line1 : Address For Line 1 = 0x00
     // Line2 : Address for Line 2 = 0x40

	uint8_t DDRAM_Address = 0 ;
    110c:	19 82       	std	Y+1, r1	; 0x01
	switch(Line)
    110e:	88 89       	ldd	r24, Y+16	; 0x10
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	91 05       	cpc	r25, r1
    1118:	19 f0       	breq	.+6      	; 0x1120 <hLCD_MoveCursor+0x2c>
    111a:	02 97       	sbiw	r24, 0x02	; 2
    111c:	21 f0       	breq	.+8      	; 0x1126 <hLCD_MoveCursor+0x32>
	{
	case 1 :  DDRAM_Address = 0x00 + Digit ;break;
	case 2 :  DDRAM_Address = 0x40 + Digit ;break;
	default:
			break;
    111e:	07 c0       	rjmp	.+14     	; 0x112e <hLCD_MoveCursor+0x3a>
     // Line2 : Address for Line 2 = 0x40

	uint8_t DDRAM_Address = 0 ;
	switch(Line)
	{
	case 1 :  DDRAM_Address = 0x00 + Digit ;break;
    1120:	89 89       	ldd	r24, Y+17	; 0x11
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	04 c0       	rjmp	.+8      	; 0x112e <hLCD_MoveCursor+0x3a>
	case 2 :  DDRAM_Address = 0x40 + Digit ;break;
    1126:	89 89       	ldd	r24, Y+17	; 0x11
    1128:	80 5c       	subi	r24, 0xC0	; 192
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	00 00       	nop
//						--------------------------
//	                          1 0 0 0 1 0 0 1



	hLCD_SendCommand(128+DDRAM_Address);
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	80 58       	subi	r24, 0x80	; 128
    1132:	0e 94 06 08 	call	0x100c	; 0x100c <hLCD_SendCommand>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a0 e8       	ldi	r26, 0x80	; 128
    113c:	bf e3       	ldi	r27, 0x3F	; 63
    113e:	8a 83       	std	Y+2, r24	; 0x02
    1140:	9b 83       	std	Y+3, r25	; 0x03
    1142:	ac 83       	std	Y+4, r26	; 0x04
    1144:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	4a e7       	ldi	r20, 0x7A	; 122
    114c:	53 e4       	ldi	r21, 0x43	; 67
    114e:	6a 81       	ldd	r22, Y+2	; 0x02
    1150:	7b 81       	ldd	r23, Y+3	; 0x03
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	8e 83       	std	Y+6, r24	; 0x06
    1160:	9f 83       	std	Y+7, r25	; 0x07
    1162:	a8 87       	std	Y+8, r26	; 0x08
    1164:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e8       	ldi	r20, 0x80	; 128
    116c:	5f e3       	ldi	r21, 0x3F	; 63
    116e:	6e 81       	ldd	r22, Y+6	; 0x06
    1170:	7f 81       	ldd	r23, Y+7	; 0x07
    1172:	88 85       	ldd	r24, Y+8	; 0x08
    1174:	99 85       	ldd	r25, Y+9	; 0x09
    1176:	0e 94 66 09 	call	0x12cc	; 0x12cc <__cmpsf2>
    117a:	88 23       	and	r24, r24
    117c:	2c f4       	brge	.+10     	; 0x1188 <hLCD_MoveCursor+0x94>
		__ticks = 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9b 87       	std	Y+11, r25	; 0x0b
    1184:	8a 87       	std	Y+10, r24	; 0x0a
    1186:	3f c0       	rjmp	.+126    	; 0x1206 <hLCD_MoveCursor+0x112>
	else if (__tmp > 65535)
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	3f ef       	ldi	r19, 0xFF	; 255
    118c:	4f e7       	ldi	r20, 0x7F	; 127
    118e:	57 e4       	ldi	r21, 0x47	; 71
    1190:	6e 81       	ldd	r22, Y+6	; 0x06
    1192:	7f 81       	ldd	r23, Y+7	; 0x07
    1194:	88 85       	ldd	r24, Y+8	; 0x08
    1196:	99 85       	ldd	r25, Y+9	; 0x09
    1198:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
    119c:	18 16       	cp	r1, r24
    119e:	4c f5       	brge	.+82     	; 0x11f2 <hLCD_MoveCursor+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e2       	ldi	r20, 0x20	; 32
    11a6:	51 e4       	ldi	r21, 0x41	; 65
    11a8:	6a 81       	ldd	r22, Y+2	; 0x02
    11aa:	7b 81       	ldd	r23, Y+3	; 0x03
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9b 87       	std	Y+11, r25	; 0x0b
    11c6:	8a 87       	std	Y+10, r24	; 0x0a
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <hLCD_MoveCursor+0xf4>
    11ca:	89 e1       	ldi	r24, 0x19	; 25
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9d 87       	std	Y+13, r25	; 0x0d
    11d0:	8c 87       	std	Y+12, r24	; 0x0c
    11d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    11d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <hLCD_MoveCursor+0xe2>
    11da:	9d 87       	std	Y+13, r25	; 0x0d
    11dc:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11de:	8a 85       	ldd	r24, Y+10	; 0x0a
    11e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9b 87       	std	Y+11, r25	; 0x0b
    11e6:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ec:	89 2b       	or	r24, r25
    11ee:	69 f7       	brne	.-38     	; 0x11ca <hLCD_MoveCursor+0xd6>
//	hLCD_SendCommand(0x80+DDRAM_Address);
//	hLCD_SendCommand(0x80|DDRAM_Address);
	_delay_ms(1);
}
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <hLCD_MoveCursor+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f2:	6e 81       	ldd	r22, Y+6	; 0x06
    11f4:	7f 81       	ldd	r23, Y+7	; 0x07
    11f6:	88 85       	ldd	r24, Y+8	; 0x08
    11f8:	99 85       	ldd	r25, Y+9	; 0x09
    11fa:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9b 87       	std	Y+11, r25	; 0x0b
    1204:	8a 87       	std	Y+10, r24	; 0x0a
    1206:	8a 85       	ldd	r24, Y+10	; 0x0a
    1208:	9b 85       	ldd	r25, Y+11	; 0x0b
    120a:	9f 87       	std	Y+15, r25	; 0x0f
    120c:	8e 87       	std	Y+14, r24	; 0x0e
    120e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1210:	9f 85       	ldd	r25, Y+15	; 0x0f
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <hLCD_MoveCursor+0x11e>
    1216:	9f 87       	std	Y+15, r25	; 0x0f
    1218:	8e 87       	std	Y+14, r24	; 0x0e
    121a:	00 00       	nop
    121c:	61 96       	adiw	r28, 0x11	; 17
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <main>:
#include "../../Timers/Inc/HAL/LCD/LCD_Interface.h"
#include "../../Timers/Inc/MCAL/ADC/ADC_Interface.h"
#include "../../Timers/Inc/MCAL/DIO/DIO_Interface.h"
#include "../../Timers/Inc/MCAL/Timer0/Timer0_Interface.h"
int main()
{
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	1f 92       	push	r1
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	/*Toggel Led When Button Pressed */
	mDIO_ChangeDirectionForPin(GroupB,Pin0,DIO_Input);
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	0e 94 c2 01 	call	0x384	; 0x384 <mDIO_ChangeDirectionForPin>
	mDIO_WriteValueForPin(GroupB,Pin0,DIO_High);
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>
	mDIO_ChangeDirectionForPin(GroupA,Pin0,DIO_Output);
    124c:	41 e0       	ldi	r20, 0x01	; 1
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	0e 94 c2 01 	call	0x384	; 0x384 <mDIO_ChangeDirectionForPin>

	/*Direction led2 */
	mDIO_ChangeDirectionForPin(GroupA,Pin5,DIO_Output);
    1256:	41 e0       	ldi	r20, 0x01	; 1
    1258:	65 e0       	ldi	r22, 0x05	; 5
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	0e 94 c2 01 	call	0x384	; 0x384 <mDIO_ChangeDirectionForPin>
	 * System Frequnce = 1Mhz
	 * PreScaller = 1
	 * Clk Time = 1 us
	 * compare value = 1000000 uSec / 4000 * 1usec
	 */
	mTimer0_InitCTCMode();
    1260:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <mTimer0_InitCTCMode>
	mGIE_Enable();
    1264:	0e 94 5d 01 	call	0x2ba	; 0x2ba <mGIE_Enable>
	uint8_t BtnState =1 ;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		BtnState= mDIO_ReadValueFromPin(GroupB,Pin0);
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	0e 94 ae 03 	call	0x75c	; 0x75c <mDIO_ReadValueFromPin>
    1274:	89 83       	std	Y+1, r24	; 0x01
		if(BtnState==0)
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	88 23       	and	r24, r24
    127a:	31 f4       	brne	.+12     	; 0x1288 <main+0x5a>
		{
			mDIO_WriteValueForPin(GroupA,Pin0,DIO_High);
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>
    1286:	f2 cf       	rjmp	.-28     	; 0x126c <main+0x3e>
		}
		else
		{
			mDIO_WriteValueForPin(GroupA,Pin0,DIO_Low);
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>
	mTimer0_InitCTCMode();
	mGIE_Enable();
	uint8_t BtnState =1 ;
	while(1)
	{
		BtnState= mDIO_ReadValueFromPin(GroupB,Pin0);
    1292:	ec cf       	rjmp	.-40     	; 0x126c <main+0x3e>

00001294 <aLed_Action1>:
	}
}


void aLed_Action1()
{
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62


	static uint8_t State = 0 ;

	if(State==0)
    129c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <State.1830>
    12a0:	88 23       	and	r24, r24
    12a2:	49 f4       	brne	.+18     	; 0x12b6 <aLed_Action1+0x22>
	{
		State=1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <State.1830>
		mDIO_WriteValueForPin(GroupA,Pin5,DIO_High);
    12aa:	41 e0       	ldi	r20, 0x01	; 1
    12ac:	65 e0       	ldi	r22, 0x05	; 5
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>





}
    12b4:	07 c0       	rjmp	.+14     	; 0x12c4 <aLed_Action1+0x30>
		State=1;
		mDIO_WriteValueForPin(GroupA,Pin5,DIO_High);
	}
	else
	{
		State=0;
    12b6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <State.1830>
		mDIO_WriteValueForPin(GroupA,Pin5,DIO_Low);
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	65 e0       	ldi	r22, 0x05	; 5
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	0e 94 b8 02 	call	0x570	; 0x570 <mDIO_WriteValueForPin>





}
    12c4:	00 00       	nop
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <__cmpsf2>:
    12cc:	0e 94 9a 09 	call	0x1334	; 0x1334 <__fp_cmp>
    12d0:	08 f4       	brcc	.+2      	; 0x12d4 <__cmpsf2+0x8>
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	08 95       	ret

000012d6 <__fixunssfsi>:
    12d6:	0e 94 c6 09 	call	0x138c	; 0x138c <__fp_splitA>
    12da:	88 f0       	brcs	.+34     	; 0x12fe <__fixunssfsi+0x28>
    12dc:	9f 57       	subi	r25, 0x7F	; 127
    12de:	98 f0       	brcs	.+38     	; 0x1306 <__fixunssfsi+0x30>
    12e0:	b9 2f       	mov	r27, r25
    12e2:	99 27       	eor	r25, r25
    12e4:	b7 51       	subi	r27, 0x17	; 23
    12e6:	b0 f0       	brcs	.+44     	; 0x1314 <__fixunssfsi+0x3e>
    12e8:	e1 f0       	breq	.+56     	; 0x1322 <__fixunssfsi+0x4c>
    12ea:	66 0f       	add	r22, r22
    12ec:	77 1f       	adc	r23, r23
    12ee:	88 1f       	adc	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	1a f0       	brmi	.+6      	; 0x12fa <__fixunssfsi+0x24>
    12f4:	ba 95       	dec	r27
    12f6:	c9 f7       	brne	.-14     	; 0x12ea <__fixunssfsi+0x14>
    12f8:	14 c0       	rjmp	.+40     	; 0x1322 <__fixunssfsi+0x4c>
    12fa:	b1 30       	cpi	r27, 0x01	; 1
    12fc:	91 f0       	breq	.+36     	; 0x1322 <__fixunssfsi+0x4c>
    12fe:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fp_zero>
    1302:	b1 e0       	ldi	r27, 0x01	; 1
    1304:	08 95       	ret
    1306:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__fp_zero>
    130a:	67 2f       	mov	r22, r23
    130c:	78 2f       	mov	r23, r24
    130e:	88 27       	eor	r24, r24
    1310:	b8 5f       	subi	r27, 0xF8	; 248
    1312:	39 f0       	breq	.+14     	; 0x1322 <__fixunssfsi+0x4c>
    1314:	b9 3f       	cpi	r27, 0xF9	; 249
    1316:	cc f3       	brlt	.-14     	; 0x130a <__fixunssfsi+0x34>
    1318:	86 95       	lsr	r24
    131a:	77 95       	ror	r23
    131c:	67 95       	ror	r22
    131e:	b3 95       	inc	r27
    1320:	d9 f7       	brne	.-10     	; 0x1318 <__fixunssfsi+0x42>
    1322:	3e f4       	brtc	.+14     	; 0x1332 <__fixunssfsi+0x5c>
    1324:	90 95       	com	r25
    1326:	80 95       	com	r24
    1328:	70 95       	com	r23
    132a:	61 95       	neg	r22
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	8f 4f       	sbci	r24, 0xFF	; 255
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	08 95       	ret

00001334 <__fp_cmp>:
    1334:	99 0f       	add	r25, r25
    1336:	00 08       	sbc	r0, r0
    1338:	55 0f       	add	r21, r21
    133a:	aa 0b       	sbc	r26, r26
    133c:	e0 e8       	ldi	r30, 0x80	; 128
    133e:	fe ef       	ldi	r31, 0xFE	; 254
    1340:	16 16       	cp	r1, r22
    1342:	17 06       	cpc	r1, r23
    1344:	e8 07       	cpc	r30, r24
    1346:	f9 07       	cpc	r31, r25
    1348:	c0 f0       	brcs	.+48     	; 0x137a <__fp_cmp+0x46>
    134a:	12 16       	cp	r1, r18
    134c:	13 06       	cpc	r1, r19
    134e:	e4 07       	cpc	r30, r20
    1350:	f5 07       	cpc	r31, r21
    1352:	98 f0       	brcs	.+38     	; 0x137a <__fp_cmp+0x46>
    1354:	62 1b       	sub	r22, r18
    1356:	73 0b       	sbc	r23, r19
    1358:	84 0b       	sbc	r24, r20
    135a:	95 0b       	sbc	r25, r21
    135c:	39 f4       	brne	.+14     	; 0x136c <__fp_cmp+0x38>
    135e:	0a 26       	eor	r0, r26
    1360:	61 f0       	breq	.+24     	; 0x137a <__fp_cmp+0x46>
    1362:	23 2b       	or	r18, r19
    1364:	24 2b       	or	r18, r20
    1366:	25 2b       	or	r18, r21
    1368:	21 f4       	brne	.+8      	; 0x1372 <__fp_cmp+0x3e>
    136a:	08 95       	ret
    136c:	0a 26       	eor	r0, r26
    136e:	09 f4       	brne	.+2      	; 0x1372 <__fp_cmp+0x3e>
    1370:	a1 40       	sbci	r26, 0x01	; 1
    1372:	a6 95       	lsr	r26
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	81 1d       	adc	r24, r1
    1378:	81 1d       	adc	r24, r1
    137a:	08 95       	ret

0000137c <__fp_split3>:
    137c:	57 fd       	sbrc	r21, 7
    137e:	90 58       	subi	r25, 0x80	; 128
    1380:	44 0f       	add	r20, r20
    1382:	55 1f       	adc	r21, r21
    1384:	59 f0       	breq	.+22     	; 0x139c <__fp_splitA+0x10>
    1386:	5f 3f       	cpi	r21, 0xFF	; 255
    1388:	71 f0       	breq	.+28     	; 0x13a6 <__fp_splitA+0x1a>
    138a:	47 95       	ror	r20

0000138c <__fp_splitA>:
    138c:	88 0f       	add	r24, r24
    138e:	97 fb       	bst	r25, 7
    1390:	99 1f       	adc	r25, r25
    1392:	61 f0       	breq	.+24     	; 0x13ac <__fp_splitA+0x20>
    1394:	9f 3f       	cpi	r25, 0xFF	; 255
    1396:	79 f0       	breq	.+30     	; 0x13b6 <__fp_splitA+0x2a>
    1398:	87 95       	ror	r24
    139a:	08 95       	ret
    139c:	12 16       	cp	r1, r18
    139e:	13 06       	cpc	r1, r19
    13a0:	14 06       	cpc	r1, r20
    13a2:	55 1f       	adc	r21, r21
    13a4:	f2 cf       	rjmp	.-28     	; 0x138a <__fp_split3+0xe>
    13a6:	46 95       	lsr	r20
    13a8:	f1 df       	rcall	.-30     	; 0x138c <__fp_splitA>
    13aa:	08 c0       	rjmp	.+16     	; 0x13bc <__fp_splitA+0x30>
    13ac:	16 16       	cp	r1, r22
    13ae:	17 06       	cpc	r1, r23
    13b0:	18 06       	cpc	r1, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	f1 cf       	rjmp	.-30     	; 0x1398 <__fp_splitA+0xc>
    13b6:	86 95       	lsr	r24
    13b8:	71 05       	cpc	r23, r1
    13ba:	61 05       	cpc	r22, r1
    13bc:	08 94       	sec
    13be:	08 95       	ret

000013c0 <__fp_zero>:
    13c0:	e8 94       	clt

000013c2 <__fp_szero>:
    13c2:	bb 27       	eor	r27, r27
    13c4:	66 27       	eor	r22, r22
    13c6:	77 27       	eor	r23, r23
    13c8:	cb 01       	movw	r24, r22
    13ca:	97 f9       	bld	r25, 7
    13cc:	08 95       	ret

000013ce <__gesf2>:
    13ce:	0e 94 9a 09 	call	0x1334	; 0x1334 <__fp_cmp>
    13d2:	08 f4       	brcc	.+2      	; 0x13d6 <__gesf2+0x8>
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	08 95       	ret

000013d8 <__mulsf3>:
    13d8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__mulsf3x>
    13dc:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__fp_round>
    13e0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__fp_pscA>
    13e4:	38 f0       	brcs	.+14     	; 0x13f4 <__mulsf3+0x1c>
    13e6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fp_pscB>
    13ea:	20 f0       	brcs	.+8      	; 0x13f4 <__mulsf3+0x1c>
    13ec:	95 23       	and	r25, r21
    13ee:	11 f0       	breq	.+4      	; 0x13f4 <__mulsf3+0x1c>
    13f0:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_inf>
    13f4:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_nan>
    13f8:	11 24       	eor	r1, r1
    13fa:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__fp_szero>

000013fe <__mulsf3x>:
    13fe:	0e 94 be 09 	call	0x137c	; 0x137c <__fp_split3>
    1402:	70 f3       	brcs	.-36     	; 0x13e0 <__mulsf3+0x8>

00001404 <__mulsf3_pse>:
    1404:	95 9f       	mul	r25, r21
    1406:	c1 f3       	breq	.-16     	; 0x13f8 <__mulsf3+0x20>
    1408:	95 0f       	add	r25, r21
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	55 1f       	adc	r21, r21
    140e:	62 9f       	mul	r22, r18
    1410:	f0 01       	movw	r30, r0
    1412:	72 9f       	mul	r23, r18
    1414:	bb 27       	eor	r27, r27
    1416:	f0 0d       	add	r31, r0
    1418:	b1 1d       	adc	r27, r1
    141a:	63 9f       	mul	r22, r19
    141c:	aa 27       	eor	r26, r26
    141e:	f0 0d       	add	r31, r0
    1420:	b1 1d       	adc	r27, r1
    1422:	aa 1f       	adc	r26, r26
    1424:	64 9f       	mul	r22, r20
    1426:	66 27       	eor	r22, r22
    1428:	b0 0d       	add	r27, r0
    142a:	a1 1d       	adc	r26, r1
    142c:	66 1f       	adc	r22, r22
    142e:	82 9f       	mul	r24, r18
    1430:	22 27       	eor	r18, r18
    1432:	b0 0d       	add	r27, r0
    1434:	a1 1d       	adc	r26, r1
    1436:	62 1f       	adc	r22, r18
    1438:	73 9f       	mul	r23, r19
    143a:	b0 0d       	add	r27, r0
    143c:	a1 1d       	adc	r26, r1
    143e:	62 1f       	adc	r22, r18
    1440:	83 9f       	mul	r24, r19
    1442:	a0 0d       	add	r26, r0
    1444:	61 1d       	adc	r22, r1
    1446:	22 1f       	adc	r18, r18
    1448:	74 9f       	mul	r23, r20
    144a:	33 27       	eor	r19, r19
    144c:	a0 0d       	add	r26, r0
    144e:	61 1d       	adc	r22, r1
    1450:	23 1f       	adc	r18, r19
    1452:	84 9f       	mul	r24, r20
    1454:	60 0d       	add	r22, r0
    1456:	21 1d       	adc	r18, r1
    1458:	82 2f       	mov	r24, r18
    145a:	76 2f       	mov	r23, r22
    145c:	6a 2f       	mov	r22, r26
    145e:	11 24       	eor	r1, r1
    1460:	9f 57       	subi	r25, 0x7F	; 127
    1462:	50 40       	sbci	r21, 0x00	; 0
    1464:	9a f0       	brmi	.+38     	; 0x148c <__mulsf3_pse+0x88>
    1466:	f1 f0       	breq	.+60     	; 0x14a4 <__mulsf3_pse+0xa0>
    1468:	88 23       	and	r24, r24
    146a:	4a f0       	brmi	.+18     	; 0x147e <__mulsf3_pse+0x7a>
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	bb 1f       	adc	r27, r27
    1472:	66 1f       	adc	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	88 1f       	adc	r24, r24
    1478:	91 50       	subi	r25, 0x01	; 1
    147a:	50 40       	sbci	r21, 0x00	; 0
    147c:	a9 f7       	brne	.-22     	; 0x1468 <__mulsf3_pse+0x64>
    147e:	9e 3f       	cpi	r25, 0xFE	; 254
    1480:	51 05       	cpc	r21, r1
    1482:	80 f0       	brcs	.+32     	; 0x14a4 <__mulsf3_pse+0xa0>
    1484:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_inf>
    1488:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__fp_szero>
    148c:	5f 3f       	cpi	r21, 0xFF	; 255
    148e:	e4 f3       	brlt	.-8      	; 0x1488 <__mulsf3_pse+0x84>
    1490:	98 3e       	cpi	r25, 0xE8	; 232
    1492:	d4 f3       	brlt	.-12     	; 0x1488 <__mulsf3_pse+0x84>
    1494:	86 95       	lsr	r24
    1496:	77 95       	ror	r23
    1498:	67 95       	ror	r22
    149a:	b7 95       	ror	r27
    149c:	f7 95       	ror	r31
    149e:	e7 95       	ror	r30
    14a0:	9f 5f       	subi	r25, 0xFF	; 255
    14a2:	c1 f7       	brne	.-16     	; 0x1494 <__mulsf3_pse+0x90>
    14a4:	fe 2b       	or	r31, r30
    14a6:	88 0f       	add	r24, r24
    14a8:	91 1d       	adc	r25, r1
    14aa:	96 95       	lsr	r25
    14ac:	87 95       	ror	r24
    14ae:	97 f9       	bld	r25, 7
    14b0:	08 95       	ret

000014b2 <__fp_inf>:
    14b2:	97 f9       	bld	r25, 7
    14b4:	9f 67       	ori	r25, 0x7F	; 127
    14b6:	80 e8       	ldi	r24, 0x80	; 128
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	08 95       	ret

000014be <__fp_nan>:
    14be:	9f ef       	ldi	r25, 0xFF	; 255
    14c0:	80 ec       	ldi	r24, 0xC0	; 192
    14c2:	08 95       	ret

000014c4 <__fp_pscA>:
    14c4:	00 24       	eor	r0, r0
    14c6:	0a 94       	dec	r0
    14c8:	16 16       	cp	r1, r22
    14ca:	17 06       	cpc	r1, r23
    14cc:	18 06       	cpc	r1, r24
    14ce:	09 06       	cpc	r0, r25
    14d0:	08 95       	ret

000014d2 <__fp_pscB>:
    14d2:	00 24       	eor	r0, r0
    14d4:	0a 94       	dec	r0
    14d6:	12 16       	cp	r1, r18
    14d8:	13 06       	cpc	r1, r19
    14da:	14 06       	cpc	r1, r20
    14dc:	05 06       	cpc	r0, r21
    14de:	08 95       	ret

000014e0 <__fp_round>:
    14e0:	09 2e       	mov	r0, r25
    14e2:	03 94       	inc	r0
    14e4:	00 0c       	add	r0, r0
    14e6:	11 f4       	brne	.+4      	; 0x14ec <__fp_round+0xc>
    14e8:	88 23       	and	r24, r24
    14ea:	52 f0       	brmi	.+20     	; 0x1500 <__fp_round+0x20>
    14ec:	bb 0f       	add	r27, r27
    14ee:	40 f4       	brcc	.+16     	; 0x1500 <__fp_round+0x20>
    14f0:	bf 2b       	or	r27, r31
    14f2:	11 f4       	brne	.+4      	; 0x14f8 <__fp_round+0x18>
    14f4:	60 ff       	sbrs	r22, 0
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <__fp_round+0x20>
    14f8:	6f 5f       	subi	r22, 0xFF	; 255
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	8f 4f       	sbci	r24, 0xFF	; 255
    14fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1500:	08 95       	ret

00001502 <_exit>:
    1502:	f8 94       	cli

00001504 <__stop_program>:
    1504:	ff cf       	rjmp	.-2      	; 0x1504 <__stop_program>
